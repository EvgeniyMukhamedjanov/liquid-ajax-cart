/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./_src/ajax-api.ts":
/*!**************************!*\
  !*** ./_src/ajax-api.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartRequestAdd\": () => (/* binding */ cartRequestAdd),\n/* harmony export */   \"cartRequestChange\": () => (/* binding */ cartRequestChange),\n/* harmony export */   \"cartRequestClear\": () => (/* binding */ cartRequestClear),\n/* harmony export */   \"cartRequestGet\": () => (/* binding */ cartRequestGet),\n/* harmony export */   \"cartRequestUpdate\": () => (/* binding */ cartRequestUpdate),\n/* harmony export */   \"subscribeToCartAjaxRequests\": () => (/* binding */ subscribeToCartAjaxRequests),\n/* harmony export */   \"REQUEST_ADD\": () => (/* binding */ REQUEST_ADD),\n/* harmony export */   \"REQUEST_CHANGE\": () => (/* binding */ REQUEST_CHANGE)\n/* harmony export */ });\nconst REQUEST_ADD = 'add';\r\nconst REQUEST_CHANGE = 'change';\r\nconst REQUEST_UPDATE = 'update';\r\nconst REQUEST_CLEAR = 'clear';\r\nconst REQUEST_GET = 'get';\r\nconst subscribers = [];\r\nfunction getEndpoint(requestType) {\r\n    switch (requestType) {\r\n        case REQUEST_ADD:\r\n            return '/cart/add.js';\r\n            break;\r\n        case REQUEST_CHANGE:\r\n            return '/cart/change.js';\r\n            break;\r\n        case REQUEST_GET:\r\n            return '/cart.js';\r\n            break;\r\n        case REQUEST_CLEAR:\r\n            return '/cart/clear.js';\r\n            break;\r\n        case REQUEST_UPDATE:\r\n            return '/cart/update.js';\r\n            break;\r\n        default:\r\n            return undefined;\r\n    }\r\n    return undefined;\r\n}\r\nfunction cartRequest(requestType, body, options) {\r\n    const endpoint = getEndpoint(requestType);\r\n    let requestBody = undefined;\r\n    if (requestType !== REQUEST_GET) {\r\n        requestBody = body || {};\r\n    }\r\n    const method = requestType === REQUEST_GET ? 'GET' : 'POST';\r\n    const info = options.info || {};\r\n    const resultSubscribers = 'firstComplete' in options ? [options.firstComplete] : [];\r\n    const requestState = {\r\n        requestType,\r\n        endpoint,\r\n        requestBody,\r\n        info\r\n    };\r\n    const redundandSections = [];\r\n    subscribers.forEach(callback => {\r\n        try {\r\n            callback({\r\n                requestType,\r\n                endpoint,\r\n                info,\r\n                requestBody\r\n            }, (resultCallback) => { resultSubscribers.push(resultCallback); });\r\n        }\r\n        catch (e) {\r\n            console.error('Liquid Ajax Cart: Error during Ajax request subscriber callback in ajax-api');\r\n            console.error(e);\r\n        }\r\n    });\r\n    if (requestBody !== undefined) {\r\n        let sectionsParam = undefined;\r\n        if (requestBody instanceof FormData || requestBody instanceof URLSearchParams) {\r\n            if (requestBody.has('sections')) {\r\n                sectionsParam = requestBody.get('sections').toString();\r\n            }\r\n        }\r\n        else {\r\n            sectionsParam = requestBody.sections;\r\n        }\r\n        if (typeof sectionsParam === 'string' || sectionsParam instanceof String || Array.isArray(sectionsParam)) {\r\n            const allSections = [];\r\n            if (Array.isArray(sectionsParam)) {\r\n                allSections.push(...sectionsParam);\r\n            }\r\n            else {\r\n                allSections.push(...(sectionsParam.split(',')));\r\n            }\r\n            if (allSections.length > 5) {\r\n                redundandSections.push(...allSections.slice(5));\r\n                const newSectionsParam = allSections.slice(0, 5).join(',');\r\n                if (requestBody instanceof FormData || requestBody instanceof URLSearchParams) {\r\n                    requestBody.set('sections', newSectionsParam);\r\n                }\r\n                else {\r\n                    requestBody.sections = newSectionsParam;\r\n                }\r\n            }\r\n        }\r\n        else if (sectionsParam !== undefined && sectionsParam !== null) {\r\n            console.error(`Liquid Ajax Cart: \"sections\" parameter in a Cart Ajax API request must be a string or an array. Now it is ${sectionsParam}`);\r\n        }\r\n    }\r\n    if ('lastComplete' in options) {\r\n        resultSubscribers.push(options.lastComplete);\r\n    }\r\n    const fetchPayload = {\r\n        method\r\n    };\r\n    if (requestType !== REQUEST_GET) {\r\n        if (requestBody instanceof FormData || requestBody instanceof URLSearchParams) {\r\n            fetchPayload.body = requestBody;\r\n            fetchPayload.headers = {\r\n                'x-requested-with': 'XMLHttpRequest'\r\n            };\r\n        }\r\n        else {\r\n            fetchPayload.body = JSON.stringify(requestBody);\r\n            fetchPayload.headers = {\r\n                'Content-Type': 'application/json'\r\n            };\r\n        }\r\n    }\r\n    fetch(endpoint, fetchPayload).then(response => {\r\n        return response.json().then((responseBody) => {\r\n            return {\r\n                ok: response.ok,\r\n                status: response.status,\r\n                body: responseBody\r\n            };\r\n        });\r\n    }).then(data => {\r\n        requestState.responseData = data;\r\n        if ((REQUEST_ADD !== requestType && redundandSections.length === 0) || !(requestState.responseData.ok)) {\r\n            return requestState;\r\n        }\r\n        return extraRequest(redundandSections).then(extraResponseData => {\r\n            requestState.extraResponseData = extraResponseData;\r\n            return requestState;\r\n        });\r\n    }).catch(error => {\r\n        console.error('Liquid Ajax Cart: Error while performing cart Ajax request');\r\n        console.error(error);\r\n        requestState.fetchError = error;\r\n        // throw requestState;\r\n    }).finally(() => {\r\n        resultSubscribers.forEach(callback => {\r\n            try {\r\n                callback(requestState);\r\n            }\r\n            catch (e) {\r\n                console.error('Liquid Ajax Cart: Error during Ajax request result callback in ajax-api');\r\n                console.error(e);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction extraRequest(sections = []) {\r\n    const requestBody = {};\r\n    if (sections.length > 0) {\r\n        requestBody.sections = sections.slice(0, 5).join(',');\r\n    }\r\n    let result = undefined;\r\n    return fetch(getEndpoint(REQUEST_UPDATE), {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(requestBody)\r\n    }).then(response => response.json().then(responseBody => {\r\n        const data = {\r\n            ok: response.ok,\r\n            status: response.status,\r\n            body: responseBody\r\n        };\r\n        if (sections.length < 6) {\r\n            return data;\r\n        }\r\n        return extraRequest(sections.slice(5)).then(addData => {\r\n            var _a;\r\n            if (addData.ok && ((_a = addData.body) === null || _a === void 0 ? void 0 : _a.sections) && typeof addData.body.sections === 'object') {\r\n                if (!('sections' in data.body)) {\r\n                    data.body.sections = {};\r\n                }\r\n                data.body.sections = Object.assign(Object.assign({}, data.body.sections), addData.body.sections);\r\n            }\r\n            return data;\r\n        });\r\n    }));\r\n}\r\nfunction cartRequestGet(options = {}) {\r\n    cartRequest(REQUEST_GET, undefined, options);\r\n}\r\nfunction cartRequestAdd(body = {}, options = {}) {\r\n    cartRequest(REQUEST_ADD, body, options);\r\n}\r\nfunction cartRequestChange(body = {}, options = {}) {\r\n    cartRequest(REQUEST_CHANGE, body, options);\r\n}\r\nfunction cartRequestUpdate(body = {}, options = {}) {\r\n    cartRequest(REQUEST_UPDATE, body, options);\r\n}\r\nfunction cartRequestClear(body = {}, options = {}) {\r\n    cartRequest(REQUEST_CLEAR, body, options);\r\n}\r\nfunction subscribeToCartAjaxRequests(callback) {\r\n    subscribers.push(callback);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/ajax-api.ts?");

/***/ }),

/***/ "./_src/controls.ts":
/*!**************************!*\
  !*** ./_src/controls.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartControlsInit\": () => (/* binding */ cartControlsInit)\n/* harmony export */ });\n/* harmony import */ var _controls_request_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls/request-button */ \"./_src/controls/request-button.ts\");\n/* harmony import */ var _controls_quantity_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls/quantity-input */ \"./_src/controls/quantity-input.ts\");\n/* harmony import */ var _controls_property_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controls/property-input */ \"./_src/controls/property-input.ts\");\n/* harmony import */ var _controls_toggle_class_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controls/toggle-class-button */ \"./_src/controls/toggle-class-button.ts\");\n\r\n\r\n\r\n\r\nfunction cartControlsInit() {\r\n    (0,_controls_request_button__WEBPACK_IMPORTED_MODULE_0__.cartRequestButtonInit)();\r\n    (0,_controls_property_input__WEBPACK_IMPORTED_MODULE_2__.cartPropertyInputInit)();\r\n    (0,_controls_quantity_input__WEBPACK_IMPORTED_MODULE_1__.cartQuantityInputInit)();\r\n    (0,_controls_toggle_class_button__WEBPACK_IMPORTED_MODULE_3__.cartToggleClassButtonInit)();\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls.ts?");

/***/ }),

/***/ "./_src/controls/property-input.ts":
/*!*****************************************!*\
  !*** ./_src/controls/property-input.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartPropertyInputInit\": () => (/* binding */ cartPropertyInputInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../helpers */ \"./_src/helpers.ts\");\n\r\n\r\n\r\n\r\nfunction consoleInputError(element) {\r\n    const { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    const attributeValue = element.getAttribute(propertyInputAttribute);\r\n    const nameValue = element.getAttribute('name');\r\n    console.error(`Liquid Ajax Cart: the element [${propertyInputAttribute}=\"${attributeValue}\"]${nameValue ? `[name=\"${nameValue}\"]` : ''} has wrong attributes.`);\r\n}\r\nfunction isValidElement(element) {\r\n    const { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!(element.hasAttribute(propertyInputAttribute))) {\r\n        return false;\r\n    }\r\n    if ((!(element instanceof HTMLInputElement) || element.type === 'hidden')\r\n        && !(element instanceof HTMLTextAreaElement)\r\n        && !(element instanceof HTMLSelectElement)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction getInputData(element) {\r\n    const { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    const result = {\r\n        objectCode: undefined,\r\n        propertyName: undefined,\r\n        attributeValue: undefined\r\n    };\r\n    if (!(element.hasAttribute(propertyInputAttribute))) {\r\n        return result;\r\n    }\r\n    let attributeValue = element.getAttribute(propertyInputAttribute).trim();\r\n    if (!attributeValue) {\r\n        const nameValue = element.getAttribute('name').trim();\r\n        if (nameValue) {\r\n            attributeValue = nameValue;\r\n        }\r\n    }\r\n    if (!attributeValue) {\r\n        consoleInputError(element);\r\n        return result;\r\n    }\r\n    result.attributeValue = attributeValue;\r\n    if (attributeValue === 'note') {\r\n        result.objectCode = 'note';\r\n        return result;\r\n    }\r\n    let [objectCode, ...propertyName] = attributeValue.trim().split('[');\r\n    let isNotValid = false;\r\n    if (!propertyName\r\n        || propertyName.length !== 1\r\n        || propertyName[0].length < 2\r\n        || propertyName[0].indexOf(']') !== propertyName[0].length - 1) {\r\n        consoleInputError(element);\r\n        return result;\r\n    }\r\n    result.objectCode = objectCode;\r\n    result.propertyName = propertyName[0].replace(']', '');\r\n    return result;\r\n}\r\nfunction initEventListeners() {\r\n    document.addEventListener('change', function (e) {\r\n        changeHandler(e.target, e);\r\n    }, false);\r\n    document.addEventListener(\"keydown\", function (e) {\r\n        const element = e.target;\r\n        if (e.key === \"Enter\") {\r\n            if (!(element instanceof HTMLTextAreaElement) || e.ctrlKey) {\r\n                changeHandler(element, e);\r\n            }\r\n        }\r\n        if (e.key === \"Escape\") {\r\n            escHandler(element);\r\n        }\r\n    }, false);\r\n}\r\nfunction stateHandler(state) {\r\n    const { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (state.status.requestInProgress) {\r\n        document.querySelectorAll(`[${propertyInputAttribute}]`).forEach(element => {\r\n            if (isValidElement(element)) {\r\n                element.disabled = true;\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        document.querySelectorAll(`[${propertyInputAttribute}]`).forEach(element => {\r\n            if (!isValidElement(element)) {\r\n                return;\r\n            }\r\n            const { objectCode, propertyName, attributeValue } = getInputData(element);\r\n            if (!objectCode) {\r\n                return;\r\n            }\r\n            if (!(state.status.cartStateSet)) {\r\n                return;\r\n            }\r\n            let propertyValue = undefined;\r\n            let doNotEnable = false;\r\n            if (objectCode === 'note') {\r\n                propertyValue = state.cart.note;\r\n            }\r\n            else if (objectCode === 'attributes') {\r\n                propertyValue = state.cart.attributes[propertyName];\r\n            }\r\n            else {\r\n                const [lineItem, objectCodeType] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n                if (lineItem) {\r\n                    propertyValue = lineItem.properties[propertyName];\r\n                }\r\n                if (lineItem === null) {\r\n                    console.error(`Liquid Ajax Cart: line item with ${objectCodeType}=\"${objectCode}\" was not found when the [${propertyInputAttribute}] element with \"${attributeValue}\" value tried to get updated from the State`);\r\n                    doNotEnable = true;\r\n                }\r\n            }\r\n            if (element instanceof HTMLInputElement && (element.type === 'checkbox' || element.type === 'radio')) {\r\n                if (element.value === propertyValue) {\r\n                    element.checked = true;\r\n                }\r\n                else {\r\n                    element.checked = false;\r\n                }\r\n            }\r\n            else {\r\n                if (typeof propertyValue !== 'string'\r\n                    && !(propertyValue instanceof String)\r\n                    && typeof propertyValue !== 'number'\r\n                    && !(propertyValue instanceof Number)) {\r\n                    if (Array.isArray(propertyValue) || propertyValue instanceof Object) {\r\n                        propertyValue = JSON.stringify(propertyValue);\r\n                        console.warn(`Liquid Ajax Cart: the ${propertyInputAttribute} with the \"${attributeValue}\" value is bound to the ${propertyName} ${objectCode === 'attributes' ? 'attribute' : 'property'} that is not string or number: ${propertyValue}`);\r\n                    }\r\n                    else {\r\n                        propertyValue = '';\r\n                    }\r\n                }\r\n                element.value = propertyValue;\r\n            }\r\n            if (!doNotEnable) {\r\n                element.disabled = false;\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction changeHandler(element, e) {\r\n    const { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!isValidElement(element)) {\r\n        return;\r\n    }\r\n    if (e) {\r\n        e.preventDefault(); // prevent form submission\r\n    }\r\n    element.blur();\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n    if (!(state.status.cartStateSet)) {\r\n        return;\r\n    }\r\n    if (state.status.requestInProgress) {\r\n        return;\r\n    }\r\n    const { objectCode, propertyName, attributeValue } = getInputData(element);\r\n    if (!objectCode) {\r\n        return;\r\n    }\r\n    let newPropertyValue = element.value;\r\n    if (element instanceof HTMLInputElement && element.type === 'checkbox' && !element.checked) {\r\n        let negativeValueInput = document.querySelector(`input[type=\"hidden\"][${propertyInputAttribute}=\"${attributeValue}\"]`);\r\n        if (!negativeValueInput && (objectCode === 'note' || objectCode === 'attributes')) {\r\n            negativeValueInput = document.querySelector(`input[type=\"hidden\"][${propertyInputAttribute}][name=\"${attributeValue}\"]`);\r\n        }\r\n        if (negativeValueInput) {\r\n            newPropertyValue = negativeValueInput.value;\r\n        }\r\n        else {\r\n            newPropertyValue = '';\r\n        }\r\n    }\r\n    if (objectCode === 'note') {\r\n        const formData = new FormData();\r\n        formData.set('note', newPropertyValue);\r\n        (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)(formData, { info: { initiator: element } });\r\n    }\r\n    else if (objectCode === 'attributes') {\r\n        const formData = new FormData();\r\n        formData.set(`attributes[${propertyName}]`, newPropertyValue);\r\n        (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)(formData, { info: { initiator: element } });\r\n    }\r\n    else {\r\n        const [lineItem, objectCodeType] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n        if (lineItem === null) {\r\n            console.error(`Liquid Ajax Cart: line item with ${objectCodeType}=\"${objectCode}\" was not found when the [${propertyInputAttribute}] element with \"${attributeValue}\" value tried to update the cart`);\r\n        }\r\n        if (!lineItem) {\r\n            return;\r\n        }\r\n        const newProperties = Object.assign({}, lineItem.properties);\r\n        newProperties[propertyName] = newPropertyValue;\r\n        const formData = new FormData();\r\n        let requestBody = formData;\r\n        formData.set(objectCodeType, objectCode);\r\n        formData.set('quantity', lineItem.quantity.toString());\r\n        for (let p in newProperties) {\r\n            const v = newProperties[p];\r\n            if (typeof v === 'string' || v instanceof String) {\r\n                formData.set(`properties[${p}]`, newProperties[p]);\r\n            }\r\n            else {\r\n                requestBody = {\r\n                    [objectCodeType]: objectCode,\r\n                    quantity: lineItem.quantity,\r\n                    properties: newProperties\r\n                };\r\n            }\r\n        }\r\n        (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)(requestBody, { info: { initiator: element } });\r\n    }\r\n}\r\nfunction escHandler(element) {\r\n    if (!isValidElement(element)) {\r\n        return;\r\n    }\r\n    if (!(element instanceof HTMLInputElement) && !(element instanceof HTMLTextAreaElement)) {\r\n        return;\r\n    }\r\n    if (element instanceof HTMLInputElement && (element.type === 'checkbox' || element.type === 'radio')) {\r\n        return;\r\n    }\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n    if (!(state.status.cartStateSet)) {\r\n        element.blur();\r\n        return;\r\n    }\r\n    const { objectCode, propertyName } = getInputData(element);\r\n    if (!objectCode) {\r\n        return;\r\n    }\r\n    let propertyValue = undefined;\r\n    if (objectCode === 'note') {\r\n        propertyValue = state.cart.note;\r\n    }\r\n    else if (objectCode === 'attributes') {\r\n        propertyValue = state.cart.attributes[propertyName];\r\n    }\r\n    else {\r\n        const [lineItem] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n        if (lineItem) {\r\n            propertyValue = lineItem.properties[propertyName];\r\n        }\r\n    }\r\n    if (propertyValue !== undefined) {\r\n        if (!propertyValue && typeof propertyValue !== 'string' && !(propertyValue instanceof String)) {\r\n            propertyValue = '';\r\n        }\r\n        element.value = String(propertyValue);\r\n    }\r\n    element.blur();\r\n}\r\nfunction cartPropertyInputInit() {\r\n    initEventListeners();\r\n    (0,_state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate)(stateHandler);\r\n    stateHandler((0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)());\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/property-input.ts?");

/***/ }),

/***/ "./_src/controls/quantity-input.ts":
/*!*****************************************!*\
  !*** ./_src/controls/quantity-input.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartQuantityInputInit\": () => (/* binding */ cartQuantityInputInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../helpers */ \"./_src/helpers.ts\");\n\r\n\r\n\r\n\r\nfunction initEventListeners() {\r\n    document.addEventListener('change', function (e) {\r\n        changeHandler(e.target, e);\r\n    }, false);\r\n    document.addEventListener(\"keydown\", function (e) {\r\n        if (e.key === \"Enter\") {\r\n            changeHandler(e.target, e);\r\n        }\r\n        if (e.key === \"Escape\") {\r\n            escHandler(e.target);\r\n        }\r\n    }, false);\r\n}\r\nfunction isValidElement(element) {\r\n    const { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!(element.hasAttribute(quantityInputAttribute))) {\r\n        return false;\r\n    }\r\n    if (!(element instanceof HTMLInputElement) || (element.type !== 'text' && element.type !== 'number')) {\r\n        console.error(`Liquid Ajax Cart: the ${quantityInputAttribute} attribute supports \"input\" elements only with the \"text\" and the \"number\" types`);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction stateHandler(state) {\r\n    const { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (state.status.requestInProgress) {\r\n        document.querySelectorAll(`input[${quantityInputAttribute}]`).forEach((input) => {\r\n            if (isValidElement(input)) {\r\n                input.disabled = true;\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        document.querySelectorAll(`input[${quantityInputAttribute}]`).forEach((input) => {\r\n            if (!isValidElement(input)) {\r\n                return;\r\n            }\r\n            const lineItemCode = input.getAttribute(quantityInputAttribute).trim();\r\n            const [lineItem] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(lineItemCode, state);\r\n            if (lineItem) {\r\n                input.value = lineItem.quantity.toString();\r\n            }\r\n            else if (lineItem === null) {\r\n                input.value = \"0\";\r\n            }\r\n            input.disabled = false;\r\n        });\r\n    }\r\n}\r\nfunction changeHandler(element, e) {\r\n    const { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!isValidElement(element)) {\r\n        return;\r\n    }\r\n    if (e) {\r\n        e.preventDefault(); // prevent form submission\r\n    }\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n    if (state.status.requestInProgress) {\r\n        return;\r\n    }\r\n    let value = Number(element.value.trim());\r\n    const lineItem = element.getAttribute(quantityInputAttribute).trim();\r\n    if (isNaN(value)) {\r\n        console.error('Liquid Ajax Cart: input value of a data-ajax-cart-quantity-input must be an Integer number');\r\n        return;\r\n    }\r\n    if (value < 1) {\r\n        value = 0;\r\n    }\r\n    if (!lineItem) {\r\n        console.error('Liquid Ajax Cart: attribute value of a data-ajax-cart-quantity-input must be an item key or an item index');\r\n        return;\r\n    }\r\n    const lineItemReqProperty = lineItem.length > 3 ? 'id' : 'line';\r\n    const formData = new FormData();\r\n    formData.set(lineItemReqProperty, lineItem);\r\n    formData.set('quantity', value.toString());\r\n    (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)(formData, { info: { initiator: element } });\r\n    element.blur();\r\n}\r\nfunction escHandler(element) {\r\n    const { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!isValidElement(element)) {\r\n        return;\r\n    }\r\n    const attributeValue = element.getAttribute(quantityInputAttribute).trim();\r\n    let relatedLineItem;\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n    if (state.status.cartStateSet) {\r\n        if (attributeValue.length > 3) {\r\n            relatedLineItem = state.cart.items.find(lineItem => lineItem.key === attributeValue);\r\n        }\r\n        else {\r\n            const lineItemIndex = Number(attributeValue) - 1;\r\n            relatedLineItem = state.cart.items[lineItemIndex];\r\n        }\r\n        if (relatedLineItem) {\r\n            element.value = relatedLineItem.quantity.toString();\r\n        }\r\n    }\r\n    element.blur();\r\n}\r\nfunction cartQuantityInputInit() {\r\n    initEventListeners();\r\n    (0,_state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate)(stateHandler);\r\n    stateHandler((0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)());\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/quantity-input.ts?");

/***/ }),

/***/ "./_src/controls/request-button.ts":
/*!*****************************************!*\
  !*** ./_src/controls/request-button.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartRequestButtonInit\": () => (/* binding */ cartRequestButtonInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.ts\");\n\r\n\r\n\r\nconst CHANGE_URL = '/cart/change';\r\nconst ADD_URL = '/cart/add';\r\nconst CLEAR_URL = '/cart/clear';\r\nconst UPDATE_URL = '/cart/update';\r\nfunction clickHandler(element, e) {\r\n    const { requestButtonAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    let url = undefined;\r\n    const validURLs = [CHANGE_URL, ADD_URL, CLEAR_URL, UPDATE_URL];\r\n    if (!(element.hasAttribute(requestButtonAttribute))) {\r\n        return;\r\n    }\r\n    const attr = element.getAttribute(requestButtonAttribute);\r\n    if (attr) {\r\n        let attrURL;\r\n        try {\r\n            attrURL = new URL(attr, window.location.origin);\r\n            if (validURLs.includes(attrURL.pathname)) {\r\n                url = attrURL;\r\n            }\r\n            else {\r\n                throw `URL should be one of the following: ${CHANGE_URL}, ${ADD_URL}, ${UPDATE_URL}, ${CLEAR_URL}`;\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(`Liquid Ajax Cart: ${requestButtonAttribute} contains an invalid URL as a parameter.`, error);\r\n        }\r\n    }\r\n    else {\r\n        if (element instanceof HTMLAnchorElement && element.hasAttribute('href')) {\r\n            const linkURL = new URL(element.href);\r\n            if (validURLs.includes(linkURL.pathname)) {\r\n                url = linkURL;\r\n            }\r\n            else if (element.hasAttribute(requestButtonAttribute)) {\r\n                console.error(`Liquid Ajax Cart: a link with the ${requestButtonAttribute} contains an invalid href URL.`, `URL should be one of the following: ${CHANGE_URL}, ${ADD_URL}, ${UPDATE_URL}, ${CLEAR_URL}`);\r\n            }\r\n        }\r\n    }\r\n    if (url === undefined) {\r\n        console.error(`Liquid Ajax Cart: a ${requestButtonAttribute} element doesn't have a valid URL`);\r\n        return;\r\n    }\r\n    if (e) {\r\n        e.preventDefault();\r\n    }\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n    if (state.status.requestInProgress) {\r\n        return;\r\n    }\r\n    const formData = new FormData();\r\n    url.searchParams.forEach((value, key) => {\r\n        formData.append(key, value);\r\n    });\r\n    switch (url.pathname) {\r\n        case ADD_URL:\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd)(formData, { info: { initiator: element } });\r\n            break;\r\n        case CHANGE_URL:\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)(formData, { info: { initiator: element } });\r\n            break;\r\n        case UPDATE_URL:\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)(formData, { info: { initiator: element } });\r\n            break;\r\n        case CLEAR_URL:\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestClear)({}, { info: { initiator: element } });\r\n            break;\r\n    }\r\n}\r\nfunction cartRequestButtonInit() {\r\n    document.addEventListener('click', function (e) {\r\n        for (let target = e.target; target && target != document.documentElement; target = target.parentElement) {\r\n            clickHandler(target, e);\r\n        }\r\n    }, false);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/request-button.ts?");

/***/ }),

/***/ "./_src/controls/toggle-class-button.ts":
/*!**********************************************!*\
  !*** ./_src/controls/toggle-class-button.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartToggleClassButtonInit\": () => (/* binding */ cartToggleClassButtonInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.ts\");\n\r\nconst ACTION_TOGGLE = 'toggle';\r\nconst ACTION_ADD = 'add';\r\nconst ACTION_REMOVE = 'remove';\r\nfunction clickHandler(element, e) {\r\n    const { toggleClassButtonAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (!(element.hasAttribute(toggleClassButtonAttribute))) {\r\n        return;\r\n    }\r\n    if (e) {\r\n        e.preventDefault();\r\n    }\r\n    const parameters = element.getAttribute(toggleClassButtonAttribute).split('|');\r\n    if (!parameters) {\r\n        console.error('Liquid Ajax Cart: Error while toggling body class');\r\n        return;\r\n    }\r\n    const cssClass = parameters[0].trim();\r\n    let action = parameters[1] ? parameters[1].trim() : ACTION_TOGGLE;\r\n    if (action !== ACTION_ADD && action !== ACTION_REMOVE) {\r\n        action = ACTION_TOGGLE;\r\n    }\r\n    if (cssClass) {\r\n        try {\r\n            if (action === ACTION_ADD) {\r\n                document.body.classList.add(cssClass);\r\n            }\r\n            else if (action === ACTION_REMOVE) {\r\n                document.body.classList.remove(cssClass);\r\n            }\r\n            else {\r\n                document.body.classList.toggle(cssClass);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('Liquid Ajax Cart: Error while toggling body class:', cssClass);\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\nfunction cartToggleClassButtonInit() {\r\n    document.addEventListener('click', function (e) {\r\n        for (let target = e.target; target && target != document.documentElement; target = target.parentElement) {\r\n            clickHandler(target, e);\r\n        }\r\n    }, false);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/toggle-class-button.ts?");

/***/ }),

/***/ "./_src/dom-binder.ts":
/*!****************************!*\
  !*** ./_src/dom-binder.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartDomBinderInit\": () => (/* binding */ cartDomBinderInit),\n/* harmony export */   \"cartDomBinderRerender\": () => (/* binding */ cartDomBinderRerender)\n/* harmony export */ });\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state */ \"./_src/state.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n\r\n\r\nfunction updateDOM(state) {\r\n    const { binderAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n    if (state.status.cartStateSet) {\r\n        document.querySelectorAll(`[${binderAttribute}]`).forEach((element) => {\r\n            const path = element.getAttribute(binderAttribute);\r\n            element.textContent = computeValue(path);\r\n        });\r\n    }\r\n}\r\nfunction computeValue(str) {\r\n    const { stateBinderFormatters } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings;\r\n    const { binderAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n    const [path, ...filters] = str.split('|');\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)();\r\n    let value = getStateValueByString(path, state);\r\n    filters.forEach(element => {\r\n        const formatterName = element.trim();\r\n        if (formatterName !== '') {\r\n            if (typeof stateBinderFormatters === 'object' && formatterName in stateBinderFormatters) {\r\n                value = stateBinderFormatters[formatterName](value);\r\n            }\r\n            else if (formatterName in defaultFormatters) {\r\n                value = defaultFormatters[formatterName](value);\r\n            }\r\n            else {\r\n                console.warn(`Liquid Ajax Cart: the \"${formatterName}\" formatter is not found`);\r\n            }\r\n        }\r\n    });\r\n    if (typeof value === 'string' || value instanceof String || typeof value === 'number' || value instanceof Number) {\r\n        return value.toString();\r\n    }\r\n    console.error(`Liquid Ajax Cart: the calculated value for the ${binderAttribute}=\"${str}\" element must be string or number. But the value is`, value);\r\n    return '';\r\n}\r\nfunction getStateValueByString(str, obj) {\r\n    const properties = str.split('.');\r\n    const currentProperty = properties.shift().trim();\r\n    if (currentProperty !== '' && currentProperty in obj && properties.length > 0) {\r\n        return getStateValueByString(properties.join('.'), obj[currentProperty]);\r\n    }\r\n    return obj[currentProperty];\r\n}\r\nconst defaultFormatters = {\r\n    'money_with_currency': (value) => {\r\n        var _a;\r\n        const state = (0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)();\r\n        if (typeof value !== 'number' && !(value instanceof Number)) {\r\n            console.error(`Liquid Ajax Cart: the 'money_with_currency' formatter is not applied because the value is not a number. The value is `, value);\r\n            return value;\r\n        }\r\n        const moneyValue = value / 100;\r\n        if ('Intl' in window && ((_a = window.Shopify) === null || _a === void 0 ? void 0 : _a.locale)) {\r\n            return Intl.NumberFormat(window.Shopify.locale, {\r\n                style: 'currency',\r\n                currency: state.cart.currency\r\n            }).format(moneyValue);\r\n        }\r\n        return `${moneyValue.toFixed(2)} ${state.cart.currency}`;\r\n    }\r\n};\r\nfunction cartDomBinderRerender() {\r\n    updateDOM((0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)());\r\n}\r\nfunction cartDomBinderInit() {\r\n    (0,_state__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartStateUpdate)(updateDOM);\r\n    updateDOM((0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)());\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/dom-binder.ts?");

/***/ }),

/***/ "./_src/global-classes.ts":
/*!********************************!*\
  !*** ./_src/global-classes.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartGlobalClassesInit\": () => (/* binding */ cartGlobalClassesInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"./_src/state.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n\r\n\r\n\r\nfunction updateClasses(state) {\r\n    const { cartStateSetBodyClass, requestInProgressBodyClass, emptyCartBodyClass, notEmptyCartBodyClass } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n    if (cartStateSetBodyClass) {\r\n        if (state.status.cartStateSet) {\r\n            document.body.classList.add(cartStateSetBodyClass);\r\n        }\r\n        else {\r\n            document.body.classList.remove(cartStateSetBodyClass);\r\n        }\r\n    }\r\n    if (requestInProgressBodyClass) {\r\n        if (state.status.requestInProgress) {\r\n            document.body.classList.add(requestInProgressBodyClass);\r\n        }\r\n        else {\r\n            document.body.classList.remove(requestInProgressBodyClass);\r\n        }\r\n    }\r\n    if (emptyCartBodyClass) {\r\n        if (state.status.cartStateSet && state.cart.item_count === 0) {\r\n            document.body.classList.add(emptyCartBodyClass);\r\n        }\r\n        else {\r\n            document.body.classList.remove(emptyCartBodyClass);\r\n        }\r\n    }\r\n    if (notEmptyCartBodyClass) {\r\n        if (state.status.cartStateSet && state.cart.item_count === 0) {\r\n            document.body.classList.remove(notEmptyCartBodyClass);\r\n        }\r\n        else {\r\n            document.body.classList.add(notEmptyCartBodyClass);\r\n        }\r\n    }\r\n}\r\nlet timer = undefined;\r\nfunction addToCartCssClassInit() {\r\n    (0,_ajax_api__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartAjaxRequests)((requestState, subscribeToResult) => {\r\n        if (requestState.requestType === 'add') {\r\n            subscribeToResult(requestState => {\r\n                var _a;\r\n                if ((_a = requestState.responseData) === null || _a === void 0 ? void 0 : _a.ok) {\r\n                    const { addToCartCssClass } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings;\r\n                    let cssClass = '';\r\n                    let duration = 0;\r\n                    if (typeof addToCartCssClass === 'string' || addToCartCssClass instanceof String) {\r\n                        cssClass = addToCartCssClass;\r\n                    }\r\n                    else if (Array.isArray(addToCartCssClass) && addToCartCssClass.length === 2 &&\r\n                        (typeof addToCartCssClass[0] === 'string' || addToCartCssClass[0] instanceof String) &&\r\n                        (typeof addToCartCssClass[1] === 'number' || addToCartCssClass[1] instanceof Number)) {\r\n                        cssClass = addToCartCssClass[0];\r\n                        if (addToCartCssClass[1] > 0) {\r\n                            duration = addToCartCssClass[1];\r\n                        }\r\n                        else {\r\n                            console.error(`Liquid Ajax Cart: the addToCartCssClass[1] value must be a positive integer. Now it is ${addToCartCssClass[1]}`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.error(`Liquid Ajax Cart: the \"addToCartCssClass\" configuration parameter must be a string or a [string, number] array`);\r\n                    }\r\n                    if (cssClass !== '') {\r\n                        try {\r\n                            document.body.classList.add(cssClass);\r\n                        }\r\n                        catch (e) {\r\n                            console.error(`Liquid Ajax Cart: error while adding the \"${cssClass}\" CSS class from the addToCartCssClass parameter to the body tag`);\r\n                            console.error(e);\r\n                        }\r\n                        if (duration > 0) {\r\n                            if (timer !== undefined) {\r\n                                clearTimeout(timer);\r\n                            }\r\n                            timer = setTimeout(() => {\r\n                                document.body.classList.remove(cssClass);\r\n                            }, duration);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\nconst cartGlobalClassesInit = () => {\r\n    (0,_state__WEBPACK_IMPORTED_MODULE_1__.subscribeToCartStateUpdate)(updateClasses);\r\n    updateClasses((0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)());\r\n    addToCartCssClassInit();\r\n};\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/global-classes.ts?");

/***/ }),

/***/ "./_src/helpers.ts":
/*!*************************!*\
  !*** ./_src/helpers.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findLineItemByCode\": () => (/* binding */ findLineItemByCode)\n/* harmony export */ });\nfunction findLineItemByCode(code, state) {\r\n    let lineItem = undefined;\r\n    let codeType = undefined;\r\n    if (state.status.cartStateSet) {\r\n        if (code.length > 3) {\r\n            lineItem = state.cart.items.find((lineItem) => lineItem.key === code);\r\n            codeType = 'id';\r\n        }\r\n        else {\r\n            lineItem = state.cart.items[Number(code) - 1];\r\n            codeType = 'line';\r\n        }\r\n        if (lineItem === undefined) {\r\n            lineItem = null;\r\n            console.error(`Liquid Ajax Cart: line item with ${codeType}=\"${code}\" not found`);\r\n        }\r\n    }\r\n    return [lineItem, codeType];\r\n}\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/helpers.ts?");

/***/ }),

/***/ "./_src/index.ts":
/*!***********************!*\
  !*** ./_src/index.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"configureCart\": () => (/* binding */ export_configureCart),\n/* harmony export */   \"cartRequestGet\": () => (/* binding */ export_cartRequestGet),\n/* harmony export */   \"cartRequestAdd\": () => (/* binding */ export_cartRequestAdd),\n/* harmony export */   \"cartRequestChange\": () => (/* binding */ export_cartRequestChange),\n/* harmony export */   \"cartRequestUpdate\": () => (/* binding */ export_cartRequestUpdate),\n/* harmony export */   \"cartRequestClear\": () => (/* binding */ export_cartRequestClear),\n/* harmony export */   \"subscribeToCartAjaxRequests\": () => (/* binding */ export_subscribeToCartAjaxRequests),\n/* harmony export */   \"getCartState\": () => (/* binding */ export_getCartState),\n/* harmony export */   \"subscribeToCartStateUpdate\": () => (/* binding */ export_subscribeToCartStateUpdate)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ \"./_src/state.ts\");\n/* harmony import */ var _dom_binder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-binder */ \"./_src/dom-binder.ts\");\n/* harmony import */ var _sections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections */ \"./_src/sections.ts\");\n/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controls */ \"./_src/controls.ts\");\n/* harmony import */ var _product_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./product-forms */ \"./_src/product-forms.ts\");\n/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./messages */ \"./_src/messages.ts\");\n/* harmony import */ var _global_classes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./global-classes */ \"./_src/global-classes.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (!('liquidAjaxCart' in window)) {\r\n    //todo: add test if browser supports FormData.set, fetch, Promise, WeakMap, template string etc.\r\n    (0,_settings__WEBPACK_IMPORTED_MODULE_0__.cartSettingsInit)();\r\n    (0,_product_forms__WEBPACK_IMPORTED_MODULE_6__.cartProductFormsInit)();\r\n    // should be before cartStateInit because \r\n    // it must subscribe to ajax-api before state \r\n    // so that all state subscribers can work with updated DOM\r\n    (0,_sections__WEBPACK_IMPORTED_MODULE_4__.cartSectionsInit)();\r\n    (0,_state__WEBPACK_IMPORTED_MODULE_2__.cartStateInit)();\r\n    (0,_dom_binder__WEBPACK_IMPORTED_MODULE_3__.cartDomBinderInit)(); // state subscriber\r\n    (0,_controls__WEBPACK_IMPORTED_MODULE_5__.cartControlsInit)(); // state subscriber\r\n    (0,_global_classes__WEBPACK_IMPORTED_MODULE_8__.cartGlobalClassesInit)(); // state subscriber\r\n    // API subscriber but must be after cartStateInit because it uses state\r\n    // to calculate if there is an error\r\n    (0,_messages__WEBPACK_IMPORTED_MODULE_7__.cartMessagesInit)();\r\n    window.liquidAjaxCart = {\r\n        configureCart: _settings__WEBPACK_IMPORTED_MODULE_0__.configureCart,\r\n        cartRequestGet: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestGet,\r\n        cartRequestAdd: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd,\r\n        cartRequestChange: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange,\r\n        cartRequestUpdate: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate,\r\n        cartRequestClear: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestClear,\r\n        subscribeToCartAjaxRequests: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.subscribeToCartAjaxRequests,\r\n        getCartState: _state__WEBPACK_IMPORTED_MODULE_2__.getCartState,\r\n        subscribeToCartStateUpdate: _state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate,\r\n    };\r\n    window.addEventListener('focus', () => {\r\n        if (_settings__WEBPACK_IMPORTED_MODULE_0__.settings.updateOnWindowFocus) {\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)({}, {});\r\n        }\r\n    });\r\n}\r\nconst export_configureCart = window.liquidAjaxCart.configureCart;\r\nconst export_cartRequestGet = window.liquidAjaxCart.cartRequestGet;\r\nconst export_cartRequestAdd = window.liquidAjaxCart.cartRequestAdd;\r\nconst export_cartRequestChange = window.liquidAjaxCart.cartRequestChange;\r\nconst export_cartRequestUpdate = window.liquidAjaxCart.cartRequestUpdate;\r\nconst export_cartRequestClear = window.liquidAjaxCart.cartRequestClear;\r\nconst export_subscribeToCartAjaxRequests = window.liquidAjaxCart.subscribeToCartAjaxRequests;\r\nconst export_getCartState = window.liquidAjaxCart.getCartState;\r\nconst export_subscribeToCartStateUpdate = window.liquidAjaxCart.subscribeToCartStateUpdate;\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/index.ts?");

/***/ }),

/***/ "./_src/messages.ts":
/*!**************************!*\
  !*** ./_src/messages.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartMessagesInit\": () => (/* binding */ cartMessagesInit)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"./_src/state.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n\r\n\r\n\r\nconst MESSAGE_TYPES = {\r\n    ERROR: 'error'\r\n};\r\nconst MESSAGE_CODES = {\r\n    LINE_ITEM_QUANTITY_ERROR: 'line_item_quantity_error',\r\n    SHOPIFY_ERROR: 'shopify_error',\r\n    REQUEST_ERROR: 'request_error',\r\n};\r\nconst changeRequestHandler = (requestState, subscribeToResult) => {\r\n    var _a;\r\n    const { messagesAttribute } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed;\r\n    let requestedId, requestedLine, requestedQuantity, lineItemIndex, requestedIdItems = [], errorContainers, itemCountBefore;\r\n    const state = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)();\r\n    if (requestState.requestBody instanceof FormData || requestState.requestBody instanceof URLSearchParams) {\r\n        if (requestState.requestBody.has('line')) {\r\n            requestedLine = requestState.requestBody.get('line').toString();\r\n        }\r\n        if (requestState.requestBody.has('id')) {\r\n            requestedId = requestState.requestBody.get('id').toString();\r\n        }\r\n        if (requestState.requestBody.has('quantity')) {\r\n            requestedQuantity = Number(requestState.requestBody.get('quantity').toString());\r\n        }\r\n    }\r\n    else {\r\n        if ('line' in requestState.requestBody) {\r\n            requestedLine = String(requestState.requestBody.line);\r\n        }\r\n        if ('id' in requestState.requestBody) {\r\n            requestedId = String(requestState.requestBody.id);\r\n        }\r\n        if ('quantity' in requestState.requestBody) {\r\n            requestedQuantity = Number(requestState.requestBody.quantity);\r\n        }\r\n    }\r\n    if (requestedLine) {\r\n        const requestedLineNumber = Number(requestedLine);\r\n        if (requestedLineNumber > 0 && state.status.cartStateSet) {\r\n            lineItemIndex = requestedLineNumber - 1;\r\n            requestedId = (_a = state.cart.items[lineItemIndex]) === null || _a === void 0 ? void 0 : _a.key;\r\n        }\r\n    }\r\n    if (requestedId) {\r\n        if (state.status.cartStateSet) {\r\n            state.cart.items.forEach((element) => {\r\n                if (element.key === requestedId || element.id === Number(requestedId)) {\r\n                    requestedIdItems.push(element);\r\n                }\r\n            });\r\n            itemCountBefore = state.cart.item_count;\r\n        }\r\n        if (requestedId.indexOf(':') > -1) {\r\n            if (requestedLine === undefined && requestedIdItems.length === 1) {\r\n                requestedLine = requestedIdItems[0].key;\r\n            }\r\n            errorContainers = document.querySelectorAll(`[${messagesAttribute}=\"${requestedId}\"]`);\r\n        }\r\n        else {\r\n            const errorContainersSelectorArray = requestedIdItems.map(element => `[${messagesAttribute}=\"${element.key}\"]`);\r\n            errorContainers = document.querySelectorAll(errorContainersSelectorArray.join(','));\r\n        }\r\n        if (errorContainers.length > 0) {\r\n            errorContainers.forEach(element => {\r\n                element.innerHTML = '';\r\n            });\r\n        }\r\n    }\r\n    subscribeToResult((requestState) => {\r\n        var _a;\r\n        const { lineItemQuantityErrorText, messageBuilder } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n        const { messagesAttribute } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed;\r\n        let resultItems = [];\r\n        const itemQuantityErrors = [];\r\n        let errorContainers;\r\n        if ((_a = requestState.responseData) === null || _a === void 0 ? void 0 : _a.ok) {\r\n            if (requestedId) {\r\n                resultItems = requestState.responseData.body.items.reduce((acc, element) => {\r\n                    if ((element.key === requestedId || element.id == Number(requestedId))) {\r\n                        acc.push(element);\r\n                    }\r\n                    return acc;\r\n                }, []);\r\n            }\r\n            resultItems.forEach((element) => {\r\n                if (!isNaN(requestedQuantity) && element.quantity < requestedQuantity && itemCountBefore === requestState.responseData.body.item_count) {\r\n                    itemQuantityErrors.push(element);\r\n                }\r\n            });\r\n            const errorContainersSelectorArray = itemQuantityErrors.reduce((acc, element) => {\r\n                acc.push(`[${messagesAttribute}=\"${element.key}\"]`);\r\n                return acc;\r\n            }, []);\r\n            if (errorContainersSelectorArray.length > 0) {\r\n                errorContainers = document.querySelectorAll(errorContainersSelectorArray.join(','));\r\n            }\r\n            if (errorContainers && errorContainers.length > 0) {\r\n                errorContainers.forEach((element) => {\r\n                    element.innerHTML = messageBuilder([{\r\n                            type: MESSAGE_TYPES.ERROR,\r\n                            text: lineItemQuantityErrorText,\r\n                            code: MESSAGE_CODES.LINE_ITEM_QUANTITY_ERROR,\r\n                            requestState\r\n                        }]);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            const errorMessage = getRequestError(requestState);\r\n            if (requestedId) {\r\n                if (requestedId.indexOf(':') > -1) {\r\n                    errorContainers = document.querySelectorAll(`[${messagesAttribute}=\"${requestedId}\"]`);\r\n                }\r\n                else {\r\n                    resultItems = [];\r\n                    const state = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)();\r\n                    if (state.status.cartStateSet) {\r\n                        state.cart.items.forEach((element) => {\r\n                            if (element.key === requestedId || element.id === Number(requestedId)) {\r\n                                resultItems.push(element);\r\n                            }\r\n                        });\r\n                    }\r\n                    const errorContainersSelectorArray = resultItems.map(element => `[${messagesAttribute}=\"${element.key}\"]`);\r\n                    errorContainers = document.querySelectorAll(errorContainersSelectorArray.join(','));\r\n                }\r\n            }\r\n            if (errorContainers && errorContainers.length > 0) {\r\n                errorContainers.forEach(element => {\r\n                    element.innerHTML = messageBuilder([errorMessage]);\r\n                });\r\n            }\r\n        }\r\n    });\r\n};\r\nconst addRequestHandler = (requestState, subscribeToResult) => {\r\n    var _a;\r\n    const initiator = (_a = requestState.info) === null || _a === void 0 ? void 0 : _a.initiator;\r\n    let formErrorContainers;\r\n    if (initiator instanceof HTMLFormElement) {\r\n        formErrorContainers = initiator.querySelectorAll(`[${_settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed.messagesAttribute}=\"form\"]`);\r\n        if (formErrorContainers.length > 0) {\r\n            formErrorContainers.forEach((element) => {\r\n                element.innerHTML = '';\r\n            });\r\n        }\r\n    }\r\n    subscribeToResult((requestState) => {\r\n        const { messageBuilder } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n        const errorMessage = getRequestError(requestState);\r\n        if (errorMessage && formErrorContainers) {\r\n            formErrorContainers.forEach((element) => {\r\n                element.innerHTML = messageBuilder([errorMessage]);\r\n            });\r\n        }\r\n    });\r\n};\r\nfunction getRequestError(requestState) {\r\n    var _a;\r\n    const { requestErrorText } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n    if ((_a = requestState.responseData) === null || _a === void 0 ? void 0 : _a.ok)\r\n        return undefined;\r\n    if ('responseData' in requestState) {\r\n        if ('description' in requestState.responseData.body) {\r\n            return {\r\n                type: MESSAGE_TYPES.ERROR,\r\n                text: requestState.responseData.body.description,\r\n                code: MESSAGE_CODES.SHOPIFY_ERROR,\r\n                requestState\r\n            };\r\n        }\r\n        if ('message' in requestState.responseData.body) {\r\n            return {\r\n                type: MESSAGE_TYPES.ERROR,\r\n                text: requestState.responseData.body.message,\r\n                code: MESSAGE_CODES.SHOPIFY_ERROR,\r\n                requestState\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        type: MESSAGE_TYPES.ERROR,\r\n        text: requestErrorText,\r\n        code: MESSAGE_CODES.REQUEST_ERROR,\r\n        requestState\r\n    };\r\n}\r\nconst cartMessagesInit = () => {\r\n    (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests)((requestState, subscribeToResult) => {\r\n        const handlers = {};\r\n        handlers[_ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_ADD] = addRequestHandler;\r\n        handlers[_ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_CHANGE] = changeRequestHandler;\r\n        if (requestState.requestType in handlers) {\r\n            handlers[requestState.requestType](requestState, subscribeToResult);\r\n        }\r\n    });\r\n};\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/messages.ts?");

/***/ }),

/***/ "./_src/product-forms.ts":
/*!*******************************!*\
  !*** ./_src/product-forms.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartProductFormsInit\": () => (/* binding */ cartProductFormsInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n\r\n\r\nconst processesAmount = new WeakMap();\r\nconst cartProductFormsInit = () => {\r\n    document.addEventListener('submit', e => {\r\n        const form = e.target;\r\n        let processesAmountBefore;\r\n        // let errorMessage = '';\r\n        const formActionUrl = new URL(form.action);\r\n        if (formActionUrl.pathname !== '/cart/add') {\r\n            return;\r\n        }\r\n        if ('productFormsFilter' in _settings__WEBPACK_IMPORTED_MODULE_0__.settings && !_settings__WEBPACK_IMPORTED_MODULE_0__.settings.productFormsFilter(form)) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        processesAmountBefore = processesAmount.get(form);\r\n        if (!(processesAmountBefore > 0)) {\r\n            processesAmountBefore = 0;\r\n        }\r\n        // if the form has ana Ajax request in progress — ignore the submit\r\n        if (processesAmountBefore > 0) {\r\n            return;\r\n        }\r\n        const formData = new FormData(form);\r\n        processesAmount.set(form, processesAmountBefore + 1);\r\n        updateFormHTML(form);\r\n        (0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd)(formData, {\r\n            \"lastComplete\": (requestState) => {\r\n                const processesAmountAfter = processesAmount.get(form);\r\n                if (processesAmountAfter > 0) {\r\n                    processesAmount.set(form, processesAmountAfter - 1);\r\n                }\r\n                updateFormHTML(form);\r\n            },\r\n            \"info\": {\r\n                \"initiator\": form\r\n            }\r\n        });\r\n    });\r\n};\r\nfunction updateFormHTML(form) {\r\n    const formProcessesAmount = processesAmount.get(form);\r\n    if (_settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass) {\r\n        if (formProcessesAmount > 0) {\r\n            form.classList.add(_settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass);\r\n        }\r\n        else {\r\n            form.classList.remove(_settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass);\r\n        }\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/product-forms.ts?");

/***/ }),

/***/ "./_src/sections.ts":
/*!**************************!*\
  !*** ./_src/sections.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartSectionsInit\": () => (/* binding */ cartSectionsInit)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n\r\n\r\nconst shopifySectionPrefix = 'shopify-section-';\r\nfunction cartSectionsInit() {\r\n    (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests)((requestState, subscribeToResult) => {\r\n        const { sectionsAttribute, sectionScrollAreaAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n        if (requestState.requestBody !== undefined) {\r\n            const sectionNames = [];\r\n            document.querySelectorAll(`[${sectionsAttribute}]`).forEach(sectionNodeChild => {\r\n                const sectionNode = sectionNodeChild.closest(`[id^=\"${shopifySectionPrefix}\"]`);\r\n                if (sectionNode) {\r\n                    const sectionId = sectionNode.id.replace(shopifySectionPrefix, '');\r\n                    if (sectionNames.indexOf(sectionId) === -1) {\r\n                        sectionNames.push(sectionId);\r\n                    }\r\n                }\r\n                else {\r\n                    console.error(`Liquid Ajax Cart: there is a ${sectionsAttribute} element that is not inside a Shopify section. All the ${sectionsAttribute} elements must be inside Shopify sections.`);\r\n                }\r\n            });\r\n            if (sectionNames.length) {\r\n                let requestingSections = sectionNames.join(',');\r\n                let sectionsParam = undefined;\r\n                if (requestState.requestBody instanceof FormData || requestState.requestBody instanceof URLSearchParams) {\r\n                    if (requestState.requestBody.has('sections')) {\r\n                        sectionsParam = requestState.requestBody.get('sections').toString();\r\n                    }\r\n                }\r\n                else {\r\n                    sectionsParam = requestState.requestBody.sections;\r\n                }\r\n                if (((typeof sectionsParam === 'string' || sectionsParam instanceof String) && sectionsParam !== '')\r\n                    || (Array.isArray(sectionsParam) && sectionsParam.length > 0)) {\r\n                    requestingSections = `${sectionsParam.toString()},${requestingSections}`;\r\n                }\r\n                if (requestState.requestBody instanceof FormData || requestState.requestBody instanceof URLSearchParams) {\r\n                    requestState.requestBody.set('sections', requestingSections);\r\n                }\r\n                else {\r\n                    requestState.requestBody.sections = requestingSections;\r\n                }\r\n            }\r\n        }\r\n        subscribeToResult((requestState) => {\r\n            var _a, _b, _c;\r\n            const { sectionsAttribute, sectionScrollAreaAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n            const parser = new DOMParser();\r\n            if (((_a = requestState.responseData) === null || _a === void 0 ? void 0 : _a.ok) && 'sections' in requestState.responseData.body) {\r\n                let sections = requestState.responseData.body.sections;\r\n                if ((_c = (_b = requestState.extraResponseData) === null || _b === void 0 ? void 0 : _b.body) === null || _c === void 0 ? void 0 : _c.sections) {\r\n                    sections = Object.assign(Object.assign({}, sections), requestState.extraResponseData.body.sections);\r\n                }\r\n                for (let sectionId in sections) {\r\n                    if (!sections[sectionId]) {\r\n                        console.error(`Liquid Ajax Cart: the HTML for the \"${sectionId}\" section was requested but the response is ${sections[sectionId]}`);\r\n                        continue;\r\n                    }\r\n                    document.querySelectorAll(`#shopify-section-${sectionId}`).forEach(sectionNode => {\r\n                        // Memorize scroll positions\r\n                        const noId = \"__noId__\";\r\n                        const scrollAreasList = {};\r\n                        sectionNode.querySelectorAll(` [${sectionScrollAreaAttribute}] `).forEach(scrollAreaNode => {\r\n                            let scrollId = scrollAreaNode.getAttribute(sectionScrollAreaAttribute).toString().trim();\r\n                            if (scrollId === '') {\r\n                                scrollId = noId;\r\n                            }\r\n                            if (!(scrollId in scrollAreasList)) {\r\n                                scrollAreasList[scrollId] = [];\r\n                            }\r\n                            scrollAreasList[scrollId].push({\r\n                                scroll: scrollAreaNode.scrollTop,\r\n                                height: scrollAreaNode.scrollHeight\r\n                            });\r\n                        });\r\n                        // Replace HTML\r\n                        const sectionParts = sectionNode.querySelectorAll(`[${sectionsAttribute}]`);\r\n                        if (sectionParts) {\r\n                            const receivedDOM = parser.parseFromString(sections[sectionId], \"text/html\");\r\n                            const receivedParts = receivedDOM.querySelectorAll(`[${sectionsAttribute}]`);\r\n                            if (sectionParts.length !== receivedParts.length) {\r\n                                console.error(`Liquid Ajax Cart: the received HTML for the \"${sectionId}\" section has a different quantity of the \"${sectionsAttribute}\" containers. The section will be updated completely.`);\r\n                                const receivedSection = receivedDOM.querySelector(`#${shopifySectionPrefix}${sectionId}`);\r\n                                if (receivedSection) {\r\n                                    sectionNode.innerHTML = receivedSection.innerHTML;\r\n                                }\r\n                            }\r\n                            else {\r\n                                sectionParts.forEach((sectionPartsItem, sectionPartsItemIndex) => {\r\n                                    sectionPartsItem.before(receivedParts[sectionPartsItemIndex]);\r\n                                    sectionPartsItem.parentElement.removeChild(sectionPartsItem);\r\n                                });\r\n                            }\r\n                        }\r\n                        // Restore scroll positions\r\n                        for (let scrollId in scrollAreasList) {\r\n                            sectionNode.querySelectorAll(` [${sectionScrollAreaAttribute}=\"${scrollId.replace(noId, '')}\"] `).forEach((scrollAreaNode, scrollAreaIndex) => {\r\n                                if (scrollAreaIndex + 1 <= scrollAreasList[scrollId].length) {\r\n                                    if (requestState.requestType !== _ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_ADD || scrollAreasList[scrollId][scrollAreaIndex]['height'] >= scrollAreaNode.scrollHeight) {\r\n                                        scrollAreaNode.scrollTop = scrollAreasList[scrollId][scrollAreaIndex]['scroll'];\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/sections.ts?");

/***/ }),

/***/ "./_src/settings.ts":
/*!**************************!*\
  !*** ./_src/settings.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartSettingsInit\": () => (/* binding */ cartSettingsInit),\n/* harmony export */   \"settings\": () => (/* binding */ settings),\n/* harmony export */   \"configureCart\": () => (/* binding */ configureCart)\n/* harmony export */ });\n/* harmony import */ var _dom_binder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-binder */ \"./_src/dom-binder.ts\");\n\r\nconst cssClassesPrefix = 'js-ajax-cart';\r\nconst dataAttributePrefix = 'data-ajax-cart';\r\nconst settings = {\r\n    productFormsFilter: (formNode) => true,\r\n    messageBuilder: (messages) => {\r\n        let result = '';\r\n        messages.forEach(element => {\r\n            result += `<div class=\"${cssClassesPrefix}-message ${cssClassesPrefix}-message--${element.type}\">${element.text}</div>`;\r\n        });\r\n        return result;\r\n    },\r\n    stateBinderFormatters: {},\r\n    addToCartCssClass: '',\r\n    lineItemQuantityErrorText: 'You can\\'t add more of this item to your cart',\r\n    requestErrorText: 'There was an error while updating your cart. Please try again.',\r\n    updateOnWindowFocus: true,\r\n    computed: {\r\n        productFormsErrorsAttribute: `${dataAttributePrefix}-form-error`,\r\n        sectionsAttribute: `${dataAttributePrefix}-section`,\r\n        binderAttribute: `${dataAttributePrefix}-bind-state`,\r\n        requestButtonAttribute: `${dataAttributePrefix}-request-button`,\r\n        toggleClassButtonAttribute: `${dataAttributePrefix}-toggle-class-button`,\r\n        initialStateAttribute: `${dataAttributePrefix}-initial-state`,\r\n        sectionScrollAreaAttribute: `${dataAttributePrefix}-section-scroll`,\r\n        quantityInputAttribute: `${dataAttributePrefix}-quantity-input`,\r\n        propertyInputAttribute: `${dataAttributePrefix}-property-input`,\r\n        messagesAttribute: `${dataAttributePrefix}-messages`,\r\n        configurationAttribute: `${dataAttributePrefix}-configuration`,\r\n        cartStateSetBodyClass: `${cssClassesPrefix}-set`,\r\n        requestInProgressBodyClass: `${cssClassesPrefix}-request-in-progress`,\r\n        emptyCartBodyClass: `${cssClassesPrefix}-empty`,\r\n        notEmptyCartBodyClass: `${cssClassesPrefix}-not-empty`,\r\n        productFormsProcessingClass: `${cssClassesPrefix}-form-in-progress`\r\n    }\r\n};\r\nfunction configureCart(property, value) {\r\n    if (property in settings && property !== 'computed') {\r\n        settings[property] = value;\r\n        if (property === 'stateBinderFormatters') {\r\n            (0,_dom_binder__WEBPACK_IMPORTED_MODULE_0__.cartDomBinderRerender)();\r\n        }\r\n    }\r\n    else {\r\n        console.error(`Liquid Ajax Cart: unknown configuration parameter \"${property}\"`);\r\n    }\r\n}\r\nfunction cartSettingsInit() {\r\n    const configurationContainer = document.querySelector(`[${settings.computed.configurationAttribute}]`);\r\n    if (configurationContainer) {\r\n        try {\r\n            const configuration = JSON.parse(configurationContainer.textContent);\r\n            const notSupportedProperties = ['productFormsFilter', 'messageBuilder'];\r\n            for (let property in configuration) {\r\n                if (notSupportedProperties.includes(property)) {\r\n                    console.error(`Liquid Ajax Cart: the \"${property}\" parameter is not supported inside the \"${settings.computed.configurationAttribute}\" script — use the \"configureCart\" function for it`);\r\n                }\r\n                else {\r\n                    configureCart(property, configuration[property]);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(`Liquid Ajax Cart: can't parse configuration JSON from the \"${settings.computed.configurationAttribute}\" script`);\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/settings.ts?");

/***/ }),

/***/ "./_src/state.ts":
/*!***********************!*\
  !*** ./_src/state.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartStateInit\": () => (/* binding */ cartStateInit),\n/* harmony export */   \"subscribeToCartStateUpdate\": () => (/* binding */ subscribeToCartStateUpdate),\n/* harmony export */   \"getCartState\": () => (/* binding */ getCartState)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.ts\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.ts\");\n\r\n\r\nlet queryCounter = 0;\r\nconst subscribers = [];\r\nlet cart = null;\r\nlet status = {\r\n    requestInProgress: false,\r\n    cartStateSet: false,\r\n};\r\nfunction cartStateInit() {\r\n    (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests)((requestState, subscribeToResult) => {\r\n        beforeRequestHandler(requestState);\r\n        statusUpdate();\r\n        subscribeToResult((requestState) => {\r\n            afterRequestHandler(requestState);\r\n            statusUpdate();\r\n        });\r\n    });\r\n    const initialStateContainer = document.querySelector(`[${_settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute}]`);\r\n    if (initialStateContainer) {\r\n        try {\r\n            const initialState = JSON.parse(initialStateContainer.textContent);\r\n            cart = cartStateFromObject(initialState);\r\n            if (cart === null) {\r\n                throw `JSON from ${_settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute} script is not correct cart object`;\r\n            }\r\n            statusUpdate();\r\n        }\r\n        catch (e) {\r\n            console.error(`Liquid Ajax Cart: can't parse cart JSON from the \"${_settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute}\" script. A /cart.js request will be performed to receive the cart state`);\r\n            console.error(e);\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestGet)();\r\n        }\r\n    }\r\n    else {\r\n        (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestGet)();\r\n    }\r\n}\r\nfunction cartStateFromObject(data) {\r\n    const { attributes, items, item_count } = data;\r\n    if (attributes === undefined || attributes === null || typeof attributes !== 'object') {\r\n        return null;\r\n    }\r\n    if (typeof item_count !== 'number' && !(item_count instanceof Number)) {\r\n        return null;\r\n    }\r\n    if (!Array.isArray(items)) {\r\n        return null;\r\n    }\r\n    const newItems = [];\r\n    for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (typeof item.id !== 'number' && !(item.id instanceof Number)) {\r\n            return null;\r\n        }\r\n        if (typeof item.key !== 'string' && !(item.key instanceof String)) {\r\n            return null;\r\n        }\r\n        if (typeof item.quantity !== 'number' && !(item.quantity instanceof Number)) {\r\n            return null;\r\n        }\r\n        if (!('properties' in item)) {\r\n            return null;\r\n        }\r\n        newItems.push(Object.assign(Object.assign({}, item), { id: item.id, key: item.key, quantity: item.quantity, properties: item.properties }));\r\n    }\r\n    return Object.assign(Object.assign({}, data), { attributes: attributes, items: newItems, item_count: item_count });\r\n}\r\nfunction beforeRequestHandler(requestState) {\r\n    queryCounter++;\r\n}\r\nfunction afterRequestHandler(requestState) {\r\n    var _a, _b;\r\n    queryCounter--;\r\n    let newCart = undefined;\r\n    if ((_a = requestState.extraResponseData) === null || _a === void 0 ? void 0 : _a.ok) {\r\n        newCart = cartStateFromObject(requestState.extraResponseData.body);\r\n    }\r\n    if (!newCart && ((_b = requestState.responseData) === null || _b === void 0 ? void 0 : _b.ok)) {\r\n        if (requestState.requestType === _ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_ADD) {\r\n            (0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestUpdate)();\r\n        }\r\n        else {\r\n            newCart = cartStateFromObject(requestState.responseData.body);\r\n        }\r\n    }\r\n    if (newCart) {\r\n        cart = newCart;\r\n    }\r\n    else if (newCart === null) {\r\n        console.error(`Liquid Ajax Cart: expected to receive the updated cart state but the object is not recognized. The request state:`, requestState);\r\n    }\r\n}\r\nconst statusUpdate = () => {\r\n    status.requestInProgress = queryCounter > 0;\r\n    status.cartStateSet = cart !== null;\r\n    notify();\r\n};\r\nfunction subscribeToCartStateUpdate(callback) {\r\n    subscribers.push(callback);\r\n    // try {\r\n    // \tcallback({\r\n    // \t\tcart,\r\n    // \t\tstatus\r\n    // \t});\r\n    // \tsubscribers.push( callback );\r\n    // } catch (e) {\r\n    // \tconsole.log('Liquid Ajax Cart: Error during subscribing to the state');\r\n    // \tconsole.error(e);\r\n    // }\r\n}\r\nfunction getCartState() {\r\n    return {\r\n        cart,\r\n        status\r\n    };\r\n}\r\nconst notify = () => {\r\n    subscribers.forEach((callback) => {\r\n        try {\r\n            callback({\r\n                cart,\r\n                status,\r\n            });\r\n        }\r\n        catch (e) {\r\n            console.error('Liquid Ajax Cart: Error during a call of a cart state update subscriber');\r\n            console.error(e);\r\n        }\r\n    });\r\n};\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/state.ts?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./_src/index.ts");
/******/ var __webpack_exports__cartRequestAdd = __webpack_exports__.cartRequestAdd;
/******/ var __webpack_exports__cartRequestChange = __webpack_exports__.cartRequestChange;
/******/ var __webpack_exports__cartRequestClear = __webpack_exports__.cartRequestClear;
/******/ var __webpack_exports__cartRequestGet = __webpack_exports__.cartRequestGet;
/******/ var __webpack_exports__cartRequestUpdate = __webpack_exports__.cartRequestUpdate;
/******/ var __webpack_exports__configureCart = __webpack_exports__.configureCart;
/******/ var __webpack_exports__getCartState = __webpack_exports__.getCartState;
/******/ var __webpack_exports__subscribeToCartAjaxRequests = __webpack_exports__.subscribeToCartAjaxRequests;
/******/ var __webpack_exports__subscribeToCartStateUpdate = __webpack_exports__.subscribeToCartStateUpdate;
/******/ export { __webpack_exports__cartRequestAdd as cartRequestAdd, __webpack_exports__cartRequestChange as cartRequestChange, __webpack_exports__cartRequestClear as cartRequestClear, __webpack_exports__cartRequestGet as cartRequestGet, __webpack_exports__cartRequestUpdate as cartRequestUpdate, __webpack_exports__configureCart as configureCart, __webpack_exports__getCartState as getCartState, __webpack_exports__subscribeToCartAjaxRequests as subscribeToCartAjaxRequests, __webpack_exports__subscribeToCartStateUpdate as subscribeToCartStateUpdate };
/******/ 
