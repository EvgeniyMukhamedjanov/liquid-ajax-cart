/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./_src/ajax-api.js":
/*!**************************!*\
  !*** ./_src/ajax-api.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartRequestAdd\": () => (/* binding */ cartRequestAdd),\n/* harmony export */   \"cartRequestChange\": () => (/* binding */ cartRequestChange),\n/* harmony export */   \"cartRequestClear\": () => (/* binding */ cartRequestClear),\n/* harmony export */   \"cartRequestGet\": () => (/* binding */ cartRequestGet),\n/* harmony export */   \"cartRequestUpdate\": () => (/* binding */ cartRequestUpdate),\n/* harmony export */   \"subscribeToCartAjaxRequests\": () => (/* binding */ subscribeToCartAjaxRequests),\n/* harmony export */   \"REQUEST_ADD\": () => (/* binding */ REQUEST_ADD),\n/* harmony export */   \"REQUEST_CHANGE\": () => (/* binding */ REQUEST_CHANGE)\n/* harmony export */ });\nconst REQUEST_ADD = 'add';\r\nconst REQUEST_CHANGE = 'change';\r\nconst REQUEST_UPDATE = 'update';\r\nconst REQUEST_CLEAR = 'clear';\r\nconst REQUEST_GET = 'get';\r\n\r\nconst subscribers = [];\r\n\r\nconst getEndpoint = ( requestType ) => {\r\n\tswitch ( requestType ) {\r\n\t\tcase REQUEST_ADD:\r\n\t\t\treturn '/cart/add.js';\r\n\t\t\tbreak;\r\n\r\n\t\tcase REQUEST_CHANGE:\r\n\t\t\treturn '/cart/change.js';\r\n\t\t\tbreak;\r\n\r\n\t\tcase REQUEST_GET:\r\n\t\t\treturn '/cart.js';\r\n\t\t\tbreak;\r\n\r\n\t\tcase REQUEST_CLEAR:\r\n\t\t\treturn '/cart/clear.js';\r\n\t\t\tbreak;\r\n\r\n\t\tcase REQUEST_UPDATE:\r\n\t\t\treturn '/cart/update.js';\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\treturn undefined;\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nconst cartRequest = ( requestType, body, options = {} ) => {\r\n\tconst endpoint = getEndpoint( requestType );\r\n\tlet requestBody = undefined;\r\n\tif ( requestType !== REQUEST_GET ) {\r\n\t\trequestBody = body || {};\r\n\t}\r\n\tconst method = requestType === REQUEST_GET ? 'GET' : 'POST';\r\n\tconst info = options.info || {};\r\n\tconst resultSubscribers = 'firstComplete' in options ? [ options.firstComplete ] : [];\r\n\tconst requestState = {\r\n\t\trequestType,\r\n\t\tendpoint\r\n\t}\r\n\r\n\tsubscribers.forEach( callback => {\r\n\t\ttry {\r\n\t\t\tcallback({\r\n\t\t\t\trequestType,\r\n\t\t\t\tendpoint,\r\n\t\t\t\tinfo,\r\n\t\t\t\t// the same requestBody will be used in the fetch request, \r\n\t\t\t\t// so subscriber can make changes in it before the request\r\n\t\t\t\trequestBody\r\n\t\t\t}, resultCallback => resultSubscribers.push( resultCallback ));\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error('Liquid Ajax Cart: Error during Ajax request subscriber callback in ajax-api');\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t});\r\n\r\n\tif ( 'lastComplete' in options ) {\r\n\t\tresultSubscribers.push( options.lastComplete );\r\n\t}\r\n\r\n\trequestState.requestBody = requestBody;\r\n\trequestState.info = info;\r\n\r\n\tconst fetchPayload = {\r\n\t\tmethod\r\n\t}\r\n\tif ( requestType !== REQUEST_GET ) {\r\n\t\tif ( requestBody instanceof FormData || requestBody instanceof URLSearchParams ) {\r\n\t\t\tfetchPayload.body = requestBody;\r\n\t\t\tfetchPayload.headers = {\r\n\t\t    \t'x-requested-with': 'XMLHttpRequest'\r\n\t\t  \t}\r\n\t\t} else {\r\n\t\t\tfetchPayload.body = JSON.stringify(requestBody);\r\n\t\t\tfetchPayload.headers = {\r\n\t\t    \t'Content-Type': 'application/json'\r\n\t\t  \t}\r\n\t\t}\r\n\t}\r\n\r\n\tfetch( \r\n\t\tendpoint, \r\n\t\tfetchPayload\r\n\t).then( response => {\r\n\t\treturn response.json().then( responseBody => {\r\n\t\t\treturn {\r\n\t\t\t\tok: response.ok,\r\n\t\t\t\tstatus: response.status,\r\n\t\t\t\tbody: responseBody\r\n\t\t\t}\r\n\t\t});\r\n\t}).then( data => {\r\n\r\n\t\trequestState.responseData = data;\r\n\r\n\t\tif ( REQUEST_ADD !== requestType || !(requestState.responseData.ok)) {\r\n\t\t\treturn requestState;\r\n\t\t}\r\n\r\n\t\t// if requestType is REQUEST_ADD lets call 'update' also to get cart json\r\n\t\t// for state and all the subscribers\r\n\t\treturn fetch ( getEndpoint( REQUEST_UPDATE ), {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t    \t'Content-Type': 'application/json'\r\n\t\t  \t}\r\n\t\t}).then( response => response.json().then( responseBody => {\r\n\t\t\t\trequestState.extraResponseData = {\r\n\t\t\t\t\tok: response.ok,\r\n\t\t\t\t\tstatus: response.status,\r\n\t\t\t\t\tbody: responseBody\r\n\t\t\t\t};\r\n\t\t\t\treturn requestState;\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t}).catch( error => {\r\n\t\tconsole.error('Liquid Ajax Cart: Error while performing cart Ajax request')\r\n\t\tconsole.error(error);\r\n\t\trequestState.fetchError = error;\r\n\t\t// throw requestState;\r\n\t}).finally(() => {\r\n\t\tresultSubscribers.forEach( callback => {\r\n\t\t\ttry {\r\n\t\t\t\tcallback(requestState);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error('Liquid Ajax Cart: Error during Ajax request result callback in ajax-api');\r\n\t\t\t\tconsole.error(e);\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n}\r\n\r\nconst cartRequestGet = ( options ) => {\r\n\tcartRequest( REQUEST_GET, undefined, options );\r\n}\r\n\r\nconst cartRequestAdd = ( body, options ) => {\r\n\tcartRequest( REQUEST_ADD, body, options );\r\n}\r\n\r\nconst cartRequestChange = ( body, options ) => {\r\n\tcartRequest( REQUEST_CHANGE, body, options );\r\n}\r\n\r\nconst cartRequestUpdate = ( body, options ) => {\r\n\tcartRequest( REQUEST_UPDATE, body, options );\r\n}\r\n\r\nconst cartRequestClear = ( body, options ) => {\r\n\tcartRequest( REQUEST_CLEAR, body, options );\r\n}\r\n\r\nconst subscribeToCartAjaxRequests = ( callback ) => {\r\n\tsubscribers.push( callback );\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/ajax-api.js?");

/***/ }),

/***/ "./_src/controls.js":
/*!**************************!*\
  !*** ./_src/controls.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartControlsInit\": () => (/* binding */ cartControlsInit)\n/* harmony export */ });\n/* harmony import */ var _controls_request_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controls/request-button */ \"./_src/controls/request-button.js\");\n/* harmony import */ var _controls_quantity_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls/quantity-input */ \"./_src/controls/quantity-input.js\");\n/* harmony import */ var _controls_property_input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controls/property-input */ \"./_src/controls/property-input.js\");\n/* harmony import */ var _controls_toggle_class_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controls/toggle-class-button */ \"./_src/controls/toggle-class-button.js\");\n\r\n\r\n\r\n\r\n\r\nfunction cartControlsInit () {\r\n\t(0,_controls_request_button__WEBPACK_IMPORTED_MODULE_0__.cartRequestButtonInit)();\r\n\t(0,_controls_property_input__WEBPACK_IMPORTED_MODULE_2__.cartPropertyInputInit)();\r\n\t(0,_controls_quantity_input__WEBPACK_IMPORTED_MODULE_1__.cartQuantityInputInit)();\r\n\t(0,_controls_toggle_class_button__WEBPACK_IMPORTED_MODULE_3__.cartToggleClassButtonInit)();\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls.js?");

/***/ }),

/***/ "./_src/controls/property-input.js":
/*!*****************************************!*\
  !*** ./_src/controls/property-input.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartPropertyInputInit\": () => (/* binding */ cartPropertyInputInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.js\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../helpers */ \"./_src/helpers.js\");\n\r\n\r\n\r\n\r\n\r\nfunction splitPropertyAttribute(attributeValue) {\r\n\tconst { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tlet [objectCode, ...propertyName] = attributeValue.split(' ');\r\n\tobjectCode = objectCode.trim();\r\n\tpropertyName = propertyName || [];\r\n\tpropertyName = propertyName.join(' ');\r\n\tif (!objectCode || !propertyName) {\r\n\t\tconsole.error(`Liquid Ajax Cart: ${ propertyInputAttribute } attribute must contain two parameters separated by the space symbol. The current value is \"${ attributeValue }\".`);\r\n\t}\r\n\treturn [ objectCode, propertyName ];\r\n}\r\n\r\nfunction initEventListeners() {\r\n\r\n\tdocument.addEventListener('change', function(e) {\r\n\t\tchangeHandler(e.target, e);\r\n\t}, false);\r\n\r\n\tdocument.addEventListener(\"keydown\", function(e) {\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\tchangeHandler(e.target, e);\r\n\t\t}\r\n\r\n\t\tif (e.key === \"Escape\") {\r\n\t\t\tescHandler(e.target);\r\n\t\t}\r\n\t}, false);\r\n}\r\n\r\nfunction stateHandler ( state ) {\r\n\tconst { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( state.status.requestInProgress ) {\r\n\t\tdocument.querySelectorAll(`[${ propertyInputAttribute }]`).forEach( element => {\r\n\t\t\telement.readOnly = true;\r\n\t\t})\r\n\t} else {\r\n\t\tdocument.querySelectorAll(`[${ propertyInputAttribute }]`).forEach( element => {\r\n\t\t\tconst attributeValue = element.getAttribute( propertyInputAttribute );\r\n\t\t\tconst [ objectCode, propertyName ] = splitPropertyAttribute(attributeValue);\r\n\t\t\t\r\n\t\t\tif(!(objectCode && propertyName)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst [ lineItem ] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n\t\t\t\r\n\t\t\tif(lineItem) {\r\n\t\t\t\telement.value = lineItem.properties[propertyName];\r\n\t\t\t\telement.readOnly = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(lineItem === null) {\r\n\t\t\t\telement.value = '';\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction changeHandler (htmlNode, e) {\r\n\tconst { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( !( htmlNode.hasAttribute( propertyInputAttribute )) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif(e) {\r\n\t\te.preventDefault(); // prevent form submission\r\n\t}\r\n\r\n\thtmlNode.blur();\r\n\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n\tif (!(state.status.cartStateSet)) {\r\n\t\treturn;\r\n\t}\r\n\tif ( state.status.requestInProgress ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst attributeValue = htmlNode.getAttribute( propertyInputAttribute );\r\n\tconst [ objectCode, propertyName ] = splitPropertyAttribute(attributeValue);\r\n\tif(!objectCode || !propertyName) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst [ lineItem, objectCodeType ] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n\r\n\tif (lineItem === null) {\r\n\t\tconsole.error(`Liquid Ajax Cart: line item was not found when the ${propertyInputAttribute}=\"${attributeValue}\" element tried to update the cart`);\r\n\t}\r\n\r\n\tif(!lineItem) {\r\n\t\treturn\r\n\t}\r\n\t\t\r\n\tconst newProperties = {\r\n\t\t...lineItem.properties\r\n\t}\r\n\tnewProperties[propertyName] = htmlNode.value;\r\n\r\n\tconst formData = new FormData();\r\n\tformData.set(objectCodeType, objectCode);\r\n\tformData.set('quantity', lineItem.quantity);\r\n\tfor( let p in newProperties) {\r\n\t\tformData.set(`properties[${ p }]`, newProperties[p]);\r\n\t}\r\n\r\n\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)( formData, { info: { initiator: this }} );\r\n}\r\n\r\nfunction escHandler (htmlNode) {\r\n\tconst { propertyInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( !( htmlNode.hasAttribute( propertyInputAttribute )) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n\tif ( !(state.status.cartStateSet) ) {\r\n\t\thtmlNode.blur();\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst attributeValue = htmlNode.getAttribute( propertyInputAttribute );\r\n\tlet [ objectCode, ...propertyName ] = attributeValue.split(' ');\r\n\tif(propertyName.length === 0) {\r\n\t\tconsole.error(`Liquid Ajax Cart: ${propertyInputAttribute} attribute must contain two parameters separated by the space symbol`);\r\n\t\treturn;\r\n\t}\r\n\tobjectCode = objectCode.trim();\r\n\tpropertyName = propertyName.join(' ');\r\n\t\r\n\tconst [ lineItem ] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(objectCode, state);\r\n\tif(lineItem) {\r\n\t\tlet propertyValue = undefined;\r\n\t\tfor( let p in lineItem.properties ) {\r\n\t\t\tif(propertyName === p) {\r\n\t\t\t\tpropertyValue = lineItem.properties[p];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(propertyValue !== undefined) {\r\n\t\t\thtmlNode.value = propertyValue;\r\n\t\t}\r\n\t}\r\n\r\n\thtmlNode.blur();\r\n}\r\n\r\nfunction cartPropertyInputInit () {\r\n\tinitEventListeners();\r\n\t(0,_state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate)( stateHandler );\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/property-input.js?");

/***/ }),

/***/ "./_src/controls/quantity-input.js":
/*!*****************************************!*\
  !*** ./_src/controls/quantity-input.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartQuantityInputInit\": () => (/* binding */ cartQuantityInputInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.js\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../helpers */ \"./_src/helpers.js\");\n\r\n\r\n\r\n\r\n\r\nfunction initEventListeners() {\r\n\tdocument.addEventListener('change', function(e) {\r\n\t\tchangeHandler(e.target, e);\r\n\t}, false);\r\n\r\n\tdocument.addEventListener(\"keydown\", function(e) {\r\n\t\tif (e.key === \"Enter\") {\r\n\t\t\tchangeHandler(e.target, e);\r\n\t\t}\r\n\r\n\t\tif (e.key === \"Escape\") {\r\n\t\t\tescHandler(e.target);\r\n\t\t}\r\n\t}, false);\r\n}\r\n\r\nfunction stateHandler ( state ) {\r\n\tconst { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( state.status.requestInProgress ) {\r\n\t\tdocument.querySelectorAll(`[${ quantityInputAttribute }]`).forEach( input => {\r\n\t\t\tinput.readOnly = true;\r\n\t\t})\r\n\t} else {\r\n\t\tdocument.querySelectorAll(`[${ quantityInputAttribute }]`).forEach( input => {\t\t\t\r\n\t\t\tconst lineItemCode = input.getAttribute( quantityInputAttribute ).trim();\r\n\t\t\tconst [ lineItem, codeType ] = (0,_helpers__WEBPACK_IMPORTED_MODULE_3__.findLineItemByCode)(lineItemCode, state);\r\n\t\t\tif(lineItem) {\r\n\t\t\t\tinput.value = lineItem.quantity;\r\n\t\t\t} else if(lineItem === null) {\r\n\t\t\t\tinput.value = 0;\r\n\t\t\t}\r\n\r\n\t\t\tinput.readOnly = false;\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction changeHandler (htmlNode, e) {\r\n\tconst { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( !( htmlNode.hasAttribute( quantityInputAttribute )) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (e) {\r\n\t\te.preventDefault(); // prevent form submission\r\n\t}\r\n\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n\tif ( state.status.requestInProgress ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet value = Number( htmlNode.value.trim() );\r\n\tconst lineItem = htmlNode.getAttribute( quantityInputAttribute ).trim();\r\n\r\n\tif ( isNaN( value )) {\r\n\t\tconsole.error('Liquid Ajax Cart: input value of a data-ajax-cart-quantity-input must be an Integer number');\r\n\t\treturn; \r\n\t}\r\n\r\n\tif ( value < 1 ) { \r\n\t\tvalue = 0;\r\n\t}\r\n\r\n\tif ( !lineItem ) {\r\n\t\tconsole.error('Liquid Ajax Cart: attribute value of a data-ajax-cart-quantity-input must be an item key or an item index');\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst lineItemReqProperty = lineItem.length > 3 ? 'id' : 'line';\r\n\r\n\tconst formData = new FormData();\r\n\tformData.set(lineItemReqProperty, lineItem);\r\n\tformData.set('quantity', value);\r\n\r\n\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)( formData, { info: { initiator: this }} );\r\n\r\n\thtmlNode.blur();\r\n}\r\n\r\nfunction escHandler (htmlNode) {\r\n\tconst { quantityInputAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( !( htmlNode.hasAttribute( quantityInputAttribute )) ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst attributeValue = htmlNode.getAttribute( quantityInputAttribute ).trim();\r\n\tlet relatedLineItem;\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n\r\n\tif ( state.status.cartStateSet ) {\r\n\t\tif ( attributeValue.length > 3 ) {\r\n\t\t\trelatedLineItem = state.cart.items.find( lineItem => lineItem.key === attributeValue );\r\n\t\t} else {\r\n\t\t\tconst lineItemIndex = Number(attributeValue) - 1;\r\n\t\t\trelatedLineItem = state.cart.items[lineItemIndex];\r\n\t\t}\r\n\t\tif (relatedLineItem) {\r\n\t\t\thtmlNode.value = relatedLineItem.quantity;\r\n\t\t}\r\n\t}\r\n\r\n\thtmlNode.blur();\r\n}\r\n\r\nfunction cartQuantityInputInit () {\r\n\tinitEventListeners();\r\n\t(0,_state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate)( stateHandler );\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/quantity-input.js?");

/***/ }),

/***/ "./_src/controls/request-button.js":
/*!*****************************************!*\
  !*** ./_src/controls/request-button.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartRequestButtonInit\": () => (/* binding */ cartRequestButtonInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.js\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../state */ \"./_src/state.js\");\n\r\n\r\n\r\n\r\nconst CHANGE_URL = '/cart/change';\r\nconst ADD_URL = '/cart/add';\r\nconst CLEAR_URL = '/cart/clear';\r\nconst UPDATE_URL = '/cart/update';\r\n\r\n\r\nfunction clickHandler (htmlNode, e) {\r\n\tconst { requestButtonAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\tlet url = undefined;\r\n\tconst validURLs = [ CHANGE_URL, ADD_URL, CLEAR_URL, UPDATE_URL ];\r\n\r\n\tif ( htmlNode.hasAttribute( requestButtonAttribute ) ) {\r\n\t\tconst attr = htmlNode.getAttribute( requestButtonAttribute );\r\n\t\tif ( attr ) {\r\n\t\t\tlet attrURL;\r\n\t\t\ttry {\r\n\t\t\t\tattrURL = new URL(attr, window.location.origin);\r\n\t\t\t\tif ( validURLs.includes( attrURL.pathname ) ) {\r\n\t\t\t\t\turl = attrURL;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow `URL should be one of the following: ${CHANGE_URL}, ${ADD_URL}, ${UPDATE_URL}, ${CLEAR_URL}`\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Liquid Ajax Cart: ${requestButtonAttribute} contains an invalid URL as a parameter.`, error);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( url === undefined ) {\r\n\t\tif ( htmlNode.hasAttribute( 'href' ) && htmlNode.tagName.toUpperCase() === 'A' ) {\r\n\t\t\tconst linkURL = new URL(htmlNode.href);\r\n\t\t\tif ( validURLs.includes( linkURL.pathname ) ) {\r\n\t\t\t\turl = linkURL;\r\n\t\t\t} else if ( htmlNode.hasAttribute( requestButtonAttribute ) ) {\r\n\t\t\t\tconsole.error(\r\n\t\t\t\t\t`Liquid Ajax Cart: a link with the ${requestButtonAttribute} contains an invalid href URL.`, \r\n\t\t\t\t\t`URL should be one of the following: ${CHANGE_URL}, ${ADD_URL}, ${UPDATE_URL}, ${CLEAR_URL}`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif ( url === undefined ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif(e) {\r\n\t\te.preventDefault();\r\n\t}\r\n\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_2__.getCartState)();\r\n\tif ( state.status.requestInProgress ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst formData = new FormData();\r\n\turl.searchParams.forEach(( value, key ) => {\r\n\t\tformData.append(key, value);\r\n\t});\r\n\r\n\tswitch ( url.pathname ) {\r\n\t\tcase ADD_URL:\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd)( formData, { info: { initiator: htmlNode }} );\r\n\t\t\tbreak;\r\n\t\tcase CHANGE_URL:\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange)( formData, { info: { initiator: htmlNode }} );\r\n\t\t\tbreak;\r\n\t\tcase UPDATE_URL:\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)( formData, { info: { initiator: htmlNode }} );\r\n\t\t\tbreak;\r\n\t\tcase CLEAR_URL:\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestClear)( {}, { info: { initiator: htmlNode }});\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n\r\nfunction cartRequestButtonInit () {\r\n\tdocument.addEventListener('click', function(e) {\r\n\t    for (var target = e.target; target && target != this; target = target.parentNode) {\r\n\t    \tclickHandler(target, e);\r\n\t    }\r\n\t}, false);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/request-button.js?");

/***/ }),

/***/ "./_src/controls/toggle-class-button.js":
/*!**********************************************!*\
  !*** ./_src/controls/toggle-class-button.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartToggleClassButtonInit\": () => (/* binding */ cartToggleClassButtonInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../settings */ \"./_src/settings.js\");\n\r\n\r\nconst ACTION_TOGGLE = 'toggle';\r\nconst ACTION_ADD = 'add';\r\nconst ACTION_REMOVE = 'remove';\r\n\r\nfunction clickHandler (htmlNode, e) {\r\n\tconst { toggleClassButtonAttribute } = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif (!( htmlNode.hasAttribute( toggleClassButtonAttribute ) )) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif(e) {\r\n\t\te.preventDefault();\r\n\t}\r\n\tconst parameters = htmlNode.getAttribute( toggleClassButtonAttribute ).split( '|' );\r\n\tif ( !parameters ) {\r\n\t\tconsole.error('Liquid Ajax Cart: Error while toggling body class');\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst cssClass = parameters[0].trim();\r\n\tlet action = parameters[1] ? parameters[1].trim() : ACTION_TOGGLE;\r\n\tif ( action !== ACTION_ADD && action !== ACTION_REMOVE ) {\r\n\t\taction = ACTION_TOGGLE;\r\n\t}\r\n\r\n\r\n\tif ( cssClass ) {\r\n\t\ttry {\r\n\t\t\tif ( action === ACTION_ADD ) {\r\n\t\t\t\tdocument.body.classList.add( cssClass );\r\n\t\t\t} else if ( action === ACTION_REMOVE ) {\r\n\t\t\t\tdocument.body.classList.remove( cssClass );\r\n\t\t\t} else {\r\n\t\t\t\tdocument.body.classList.toggle( cssClass );\r\n\t\t\t}\r\n        } catch (e) {\r\n        \tconsole.error('Liquid Ajax Cart: Error while toggling body class:', cssClass)\r\n        \tconsole.error(e);\r\n        }\r\n\t}\r\n}\r\n\r\nfunction cartToggleClassButtonInit () {\r\n\tdocument.addEventListener('click', function(e) {\r\n\t    for (var target = e.target; target && target != this; target = target.parentNode) {\r\n\t\t\tclickHandler(target, e);\r\n\t    }\r\n\t}, false);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/controls/toggle-class-button.js?");

/***/ }),

/***/ "./_src/dom-binder.js":
/*!****************************!*\
  !*** ./_src/dom-binder.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartDomBinderInit\": () => (/* binding */ cartDomBinderInit)\n/* harmony export */ });\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state */ \"./_src/state.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n\r\n\r\n\r\nconst updateDOM = ( state ) => {\r\n\r\n\tconst binderAttribute = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.binderAttribute;\r\n\r\n\tif ( state.status.cartStateSet ) {\r\n\t\tdocument.querySelectorAll( `[${ binderAttribute }]` ).forEach( element => {\r\n\t\t\tconst path = element.getAttribute( binderAttribute );\r\n\t\t\tconst value = computeValue( path );\r\n\t\t\tif (value !== undefined) {\r\n\t\t\t\telement.innerText = value;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst computeValue = ( str ) => {\r\n\tconst [ path, ...filters ] = str.split('|');\r\n\tlet value = getStateValueByString( path );\r\n\tfilters.forEach( element => {\r\n\t\tconst formatterName = element.trim();\r\n\t\tif ( formatterName !== '' ) {\r\n\t\t\tif ( formatterName in formatters ) {\r\n\t\t\t\tvalue = formatters[ formatterName ]( value );\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(`Liquid Ajax Cart: the \"${ formatterName }\" formatter doesn't exist`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t})\r\n\treturn value;\r\n}\r\n\r\n// don't pass obj parameter when you call the function — the obj param is for reccursive calls\r\nfunction getStateValueByString ( str, obj = (0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)() ) {\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)();\r\n\t// todo test with \"foo.bar.\", \".foo.bar\", \".foo.bar.\", \"foo..bar\", \"foo. .bar. \"\r\n\tconst properties = str.split('.');\r\n\tconst currentProperty = properties.shift().trim();\r\n\tif ( currentProperty in obj && properties.length > 0 ) {\r\n\t\treturn getStateValueByString( properties.join('.'), obj[ currentProperty ] )\r\n\t}\r\n\treturn obj[ currentProperty ];\r\n}\r\n\r\nconst formatters = {\r\n\t'amount': ( value ) => {\r\n\t\tif ( 'Shopify' in window && 'formatMoney' in Shopify ) {\r\n\t\t\treturn Shopify.formatMoney(value, '{{ amount }}');\r\n\t\t}\r\n\t},\r\n\t'amount_no_decimals': ( value ) => {\r\n\t\tif ( 'Shopify' in window && 'formatMoney' in Shopify ) {\r\n\t\t\treturn Shopify.formatMoney(value, '{{ amount_no_decimals }}');\r\n\t\t}\r\n\t},\r\n\t'amount_with_comma_separator': ( value ) => {\r\n\t\tif ( 'Shopify' in window && 'formatMoney' in Shopify ) {\r\n\t\t\treturn Shopify.formatMoney(value, '{{ amount_with_comma_separator }}');\r\n\t\t}\r\n\t},\r\n\t'amount_no_decimals_with_comma_separator': ( value ) => {\r\n\t\tif ( 'Shopify' in window && 'formatMoney' in Shopify ) {\r\n\t\t\treturn Shopify.formatMoney(value, '{{ amount_no_decimals_with_comma_separator }}');\r\n\t\t}\r\n\t},\r\n\t'amount_with_apostrophe_separator': ( value ) => {\r\n\t\tif ( 'Shopify' in window && 'formatMoney' in Shopify ) {\r\n\t\t\treturn Shopify.formatMoney(value, '{{ amount_with_apostrophe_separator }}');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst cartDomBinderInit = () => {\r\n\t;(0,_state__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartStateUpdate)( updateDOM );\r\n\tupdateDOM( (0,_state__WEBPACK_IMPORTED_MODULE_0__.getCartState)() );\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/dom-binder.js?");

/***/ }),

/***/ "./_src/global-classes.js":
/*!********************************!*\
  !*** ./_src/global-classes.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartGlobalClassesInit\": () => (/* binding */ cartGlobalClassesInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"./_src/state.js\");\n\r\n\r\n\r\nconst updateClasses = state => {\r\n\tconst { \r\n\t\tcartStateSetBodyClass, \r\n\t\trequestInProgressBodyClass,\r\n\t\temptyCartBodyClass,\r\n\t\tnotEmptyCartBodyClass\r\n\t} = _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed;\r\n\r\n\tif ( cartStateSetBodyClass ) {\r\n\t\tif ( state.status.cartStateSet ) {\r\n\t\t\tdocument.body.classList.add( cartStateSetBodyClass );\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.remove( cartStateSetBodyClass );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( requestInProgressBodyClass ) {\r\n\t\tif ( state.status.requestInProgress ) {\r\n\t\t\tdocument.body.classList.add( requestInProgressBodyClass );\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.remove( requestInProgressBodyClass );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( emptyCartBodyClass ) {\r\n\t\tif ( state.status.cartStateSet && state.cart.item_count === 0 ) {\r\n\t\t\tdocument.body.classList.add( emptyCartBodyClass );\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.remove( emptyCartBodyClass );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( notEmptyCartBodyClass ) {\r\n\t\tif ( state.status.cartStateSet && state.cart.item_count === 0 ) {\r\n\t\t\tdocument.body.classList.remove( notEmptyCartBodyClass );\r\n\t\t} else {\r\n\t\t\tdocument.body.classList.add( notEmptyCartBodyClass );\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst cartGlobalClassesInit = () => {\r\n\t;(0,_state__WEBPACK_IMPORTED_MODULE_1__.subscribeToCartStateUpdate)( updateClasses );\r\n\tupdateClasses( (0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)() );\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/global-classes.js?");

/***/ }),

/***/ "./_src/helpers.js":
/*!*************************!*\
  !*** ./_src/helpers.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findLineItemByCode\": () => (/* binding */ findLineItemByCode)\n/* harmony export */ });\nfunction findLineItemByCode(code, state) {\r\n\tlet lineItem = undefined;\r\n\tlet codeType = undefined;\r\n\r\n\tif (state.status.cartStateSet) {\r\n\t\tif ( code.length > 3 ) {\r\n\t\t\tlineItem = state.cart.items.find( lineItem => lineItem.key === code );\r\n\t\t\tcodeType = 'id';\r\n\t\t} else {\r\n\t\t\tlineItem = state.cart.items[Number(code) - 1];\r\n\t\t\tcodeType = 'line';\r\n\t\t}\r\n\r\n\t\tif (lineItem === undefined) {\r\n\t\t\tlineItem = null;\r\n\t\t\tconsole.error(`Liquid Ajax Cart: line item with ${ codeType }=\"${ code }\" not found`);\r\n\t\t}\r\n\t}\r\n\treturn [ lineItem, codeType ]\r\n}\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/helpers.js?");

/***/ }),

/***/ "./_src/index.js":
/*!***********************!*\
  !*** ./_src/index.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"configureCart\": () => (/* binding */ export_configureCart),\n/* harmony export */   \"cartRequestGet\": () => (/* binding */ export_cartRequestGet),\n/* harmony export */   \"cartRequestAdd\": () => (/* binding */ export_cartRequestAdd),\n/* harmony export */   \"cartRequestChange\": () => (/* binding */ export_cartRequestChange),\n/* harmony export */   \"cartRequestUpdate\": () => (/* binding */ export_cartRequestUpdate),\n/* harmony export */   \"cartRequestClear\": () => (/* binding */ export_cartRequestClear),\n/* harmony export */   \"subscribeToCartAjaxRequests\": () => (/* binding */ export_subscribeToCartAjaxRequests),\n/* harmony export */   \"getCartState\": () => (/* binding */ export_getCartState),\n/* harmony export */   \"subscribeToCartStateUpdate\": () => (/* binding */ export_subscribeToCartStateUpdate)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state */ \"./_src/state.js\");\n/* harmony import */ var _dom_binder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-binder */ \"./_src/dom-binder.js\");\n/* harmony import */ var _sections__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sections */ \"./_src/sections.js\");\n/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controls */ \"./_src/controls.js\");\n/* harmony import */ var _product_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./product-forms */ \"./_src/product-forms.js\");\n/* harmony import */ var _messages__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./messages */ \"./_src/messages.js\");\n/* harmony import */ var _global_classes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./global-classes */ \"./_src/global-classes.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (!( 'liquidAjaxCart' in window )) {\r\n\t(0,_settings__WEBPACK_IMPORTED_MODULE_0__.cartSettingsInit)();\r\n\t(0,_product_forms__WEBPACK_IMPORTED_MODULE_6__.cartProductFormsInit)();\r\n\r\n\t// should be before cartStateInit because \r\n\t// it must subscribe to ajax-api before state \r\n\t// so that all state subscribers can work with updated DOM\r\n\t(0,_sections__WEBPACK_IMPORTED_MODULE_4__.cartSectionsInit)();\r\n\r\n\t(0,_state__WEBPACK_IMPORTED_MODULE_2__.cartStateInit)();\r\n\t(0,_dom_binder__WEBPACK_IMPORTED_MODULE_3__.cartDomBinderInit)(); // state subscriber\r\n\t(0,_controls__WEBPACK_IMPORTED_MODULE_5__.cartControlsInit)(); // state subscriber\r\n\t(0,_global_classes__WEBPACK_IMPORTED_MODULE_8__.cartGlobalClassesInit)(); // state subscriber\r\n\r\n\t// API subscriber but must be after cartStateInit because it uses state\r\n\t// to calculate if there is an error\r\n\t(0,_messages__WEBPACK_IMPORTED_MODULE_7__.cartMessagesInit)(); \r\n\r\n\twindow.liquidAjaxCart = {\r\n\t\tconfigureCart: _settings__WEBPACK_IMPORTED_MODULE_0__.configureCart,\r\n\r\n\t\tcartRequestGet: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestGet, \r\n\t\tcartRequestAdd: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd, \r\n\t\tcartRequestChange: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestChange, \r\n\t\tcartRequestUpdate: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate, \r\n\t\tcartRequestClear: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestClear, \r\n\t\tsubscribeToCartAjaxRequests: _ajax_api__WEBPACK_IMPORTED_MODULE_1__.subscribeToCartAjaxRequests,\r\n\r\n\t\tgetCartState: _state__WEBPACK_IMPORTED_MODULE_2__.getCartState,\r\n\t\tsubscribeToCartStateUpdate: _state__WEBPACK_IMPORTED_MODULE_2__.subscribeToCartStateUpdate,\r\n\t}\r\n\r\n\twindow.addEventListener('focus', () => {\r\n\t\tif ( _settings__WEBPACK_IMPORTED_MODULE_0__.settings.updateOnWindowFocus ) {\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestUpdate)();\r\n\t\t}\r\n\t})\r\n}\r\n\r\nconst export_configureCart = liquidAjaxCart.configureCart;\r\n\r\nconst export_cartRequestGet = liquidAjaxCart.cartRequestGet;\r\nconst export_cartRequestAdd = liquidAjaxCart.cartRequestAdd;\r\nconst export_cartRequestChange = liquidAjaxCart.cartRequestChange;\r\nconst export_cartRequestUpdate = liquidAjaxCart.cartRequestUpdate;\r\nconst export_cartRequestClear = liquidAjaxCart.cartRequestClear;\r\nconst export_subscribeToCartAjaxRequests = liquidAjaxCart.subscribeToCartAjaxRequests;\r\n\r\nconst export_getCartState = liquidAjaxCart.getCartState;\r\nconst export_subscribeToCartStateUpdate = liquidAjaxCart.subscribeToCartStateUpdate;\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/index.js?");

/***/ }),

/***/ "./_src/messages.js":
/*!**************************!*\
  !*** ./_src/messages.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartMessagesInit\": () => (/* binding */ cartMessagesInit)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state */ \"./_src/state.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n\r\n\r\n\r\n\r\nconst MESSAGE_TYPES = {\r\n\tERROR: 'error'\r\n}\r\n\r\nconst MESSAGE_CODES = {\r\n\tLINE_ITEM_QUANTITY_ERROR: 'line_item_quantity_error',\r\n\tSHOPIFY_ERROR: 'shopify_error',\r\n\tREQUEST_ERROR: 'request_error',\r\n}\r\n\r\nconst changeRequestHandler = ( requestState, subscribeToResult ) => {\r\n\tconst { messagesAttribute } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed;\r\n\tlet requestedId, requestedLine, requestedQuantity, lineItemIndex, requestedIdItems = [], errorContainers, itemCountBefore;\r\n\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)();\r\n\r\n\tif ( requestState.requestBody instanceof FormData || requestState.requestBody instanceof URLSearchParams ) {\r\n\t\trequestedLine = requestState.requestBody.get('line');\r\n\t\trequestedId = requestState.requestBody.get('id');\r\n\t\trequestedQuantity = requestState.requestBody.get('quantity');\r\n    } else {\r\n\t\trequestedLine = requestState.requestBody.line;\r\n\t\trequestedId = requestState.requestBody.id;\r\n\t\trequestedQuantity = requestState.requestBody.quantity;\r\n\t}\r\n\r\n\tif ( requestedLine ) {\r\n\t\tconst requestedLineNumber = Number(requestedLine);\r\n\t\tif ( requestedLineNumber > 0 && state.status.cartStateSet ) {\r\n\t\t\tlineItemIndex = requestedLineNumber - 1;\r\n\t\t\trequestedId = state.cart.items[lineItemIndex]?.key;\r\n\t\t}\r\n\t}\r\n\r\n\tif ( requestedId ) {\r\n\t\tif ( state.status.cartStateSet ) {\r\n\t\t\tstate.cart.items.forEach( element => {\r\n\t\t\t\tif ( element.key === requestedId || element.id == requestedId ) {\r\n\t\t\t\t\trequestedIdItems.push( element );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\titemCountBefore = state.cart.item_count;\r\n\t\t}\r\n\r\n\t\tif ( requestedId.indexOf(':') > -1 ) {\r\n\t\t\tif ( requestedLine === undefined && requestedIdItems.length === 1) {\r\n\t\t\t\trequestedLine = requestedIdItems[0].key;\r\n\t\t\t}\r\n\t\t\terrorContainers = document.querySelectorAll(`[${ messagesAttribute }=\"${ requestedId }\"]`);\r\n\t\t} else {\r\n\t\t\tconst errorContainersSelectorArray = requestedIdItems.map( element => `[${ messagesAttribute }=\"${ element.key }\"]` );\r\n        \terrorContainers = document.querySelectorAll(errorContainersSelectorArray.join(','));\r\n\t\t}\r\n\r\n\t\tif ( errorContainers.length > 0 ) {\r\n\t\t\terrorContainers.forEach( element => {\r\n\t\t\t\telement.innerHTML = '';\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tsubscribeToResult( requestState => {\r\n\t\tconst { lineItemQuantityErrorText, messageBuilder } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n\t\tconst { messagesAttribute } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed;\r\n\t\tlet resultItems = [];\r\n\t\tconst itemQuantityErrors = [];\r\n\r\n\t\tif ( requestState.responseData?.ok ) {\r\n\t\t\tif ( requestedId ) {\r\n\t\t\t\tresultItems = requestState.responseData.body.items.reduce(( acc, element ) => {\r\n\t\t\t\t\tif (( element.key === requestedId || element.id == requestedId ) ) {\r\n\t\t\t\t\t\tacc.push(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn acc;\r\n\t\t\t\t}, []);\r\n\t\t\t}\r\n\r\n\r\n\t\t\tresultItems.forEach( element => {\r\n\t\t\t\tif ( element.quantity < requestedQuantity && itemCountBefore === requestState.responseData.body.item_count ) {\r\n\t\t\t\t\titemQuantityErrors.push( element );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tconst errorContainersSelectorArray = itemQuantityErrors.reduce((acc, element) => {\r\n\t\t\t\tacc.push(`[${ messagesAttribute }=\"${ element.key }\"]`);\r\n        \t\treturn acc;\r\n        \t}, []);\r\n\r\n\t\t\terrorContainers = [];\r\n\t\t\tif ( errorContainersSelectorArray.length > 0 ) {\r\n\t\t\t\terrorContainers = document.querySelectorAll( errorContainersSelectorArray.join(',') );\r\n\t\t\t}\r\n\r\n\t\t\terrorContainers.forEach( element => {\r\n\t\t\t\telement.innerHTML = messageBuilder([{\r\n\t\t\t\t\ttype: MESSAGE_TYPES.ERROR,\r\n\t\t\t\t\ttext: lineItemQuantityErrorText,\r\n\t\t\t\t\tcode: MESSAGE_CODES.LINE_ITEM_QUANTITY_ERROR,\r\n\t\t\t\t\trequestState\r\n\t\t\t\t}]);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst errorMessage = getRequestError( requestState );\r\n\t\t\terrorContainers = [];\r\n\t\t\tif ( requestedId ) {\r\n\t\t\t\tif ( requestedId.indexOf(':') > -1 ) {\r\n\t\t\t\t\terrorContainers = document.querySelectorAll(`[${ messagesAttribute }=\"${ requestedId }\"]`);\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresultItems = [];\r\n\t\t\t\t\tconst state = (0,_state__WEBPACK_IMPORTED_MODULE_1__.getCartState)();\r\n\t\t\t\t\tif ( state.status.cartStateSet ) {\r\n\t\t\t\t\t\tstate.cart.items.forEach( element => {\r\n\t\t\t\t\t\t\tif (( element.key === requestedId || element.id == requestedId ) ) {\r\n\t\t\t\t\t\t\t\tresultItems.push( element );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst errorContainersSelectorArray = resultItems.map( element => `[${ messagesAttribute }=\"${ element.key }\"]` );\r\n\t\t        \terrorContainers = document.querySelectorAll(errorContainersSelectorArray.join(','));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( errorContainers.length > 0 ) {\r\n\t\t\t\terrorContainers.forEach( element => {\r\n\t\t\t\t\telement.innerHTML = messageBuilder([ errorMessage ]);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n    });\r\n}\r\n\r\nconst addRequestHandler = ( requestState, subscribeToResult ) => {\r\n\tconst initiator = requestState.info?.initiator;\r\n\tlet formErrorContainers;\r\n\r\n\tif ( initiator instanceof HTMLFormElement ) {\r\n\t\tformErrorContainers = initiator.querySelectorAll(`[${ _settings__WEBPACK_IMPORTED_MODULE_2__.settings.computed.messagesAttribute }=\"form\"]`);\r\n\t\tif ( formErrorContainers.length > 0 ) {\r\n\t\t\tformErrorContainers.forEach( element => {\r\n\t\t\t\telement.innerHTML = '';\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tsubscribeToResult( requestState => {\r\n\t\tconst { messageBuilder } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n\t\tconst errorMessage = getRequestError( requestState );\r\n\t\tif ( errorMessage && formErrorContainers ) {\r\n\t\t\tformErrorContainers.forEach( element => {\r\n\t\t\t\telement.innerHTML = messageBuilder([ errorMessage ]);\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nconst getRequestError = (requestState) => {\r\n\r\n\tconst { requestErrorText } = _settings__WEBPACK_IMPORTED_MODULE_2__.settings;\r\n\r\n\tif (requestState.responseData?.ok) return undefined;\r\n\r\n\tif ( 'responseData' in requestState ) {\r\n\t\tif ( 'description' in requestState.responseData.body ) {\r\n\t\t\treturn { \r\n\t\t\t\ttype: MESSAGE_TYPES.ERROR,\r\n\t\t\t\ttext: requestState.responseData.body.description,\r\n\t\t\t\tcode: MESSAGE_CODES.SHOPIFY_ERROR,\r\n\t\t\t\trequestState\r\n\t\t\t}\r\n\t\t} \r\n\t\tif ( 'message' in requestState.responseData.body ) {\r\n\t\t\treturn { \r\n\t\t\t\ttype: MESSAGE_TYPES.ERROR,\r\n\t\t\t\ttext: requestState.responseData.body.message,\r\n\t\t\t\tcode: MESSAGE_CODES.SHOPIFY_ERROR,\r\n\t\t\t\trequestState\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\r\n\treturn { \r\n\t\ttype: MESSAGE_TYPES.ERROR,\r\n\t\ttext: requestErrorText,\r\n\t\tcode: MESSAGE_CODES.REQUEST_ERROR,\r\n\t\trequestState\r\n\t}\r\n}\r\n\r\nconst cartMessagesInit = () => {\r\n\t;(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests)(( requestState, subscribeToResult ) => {\r\n\t\tconst handlers = {};\r\n\t\thandlers[_ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_ADD] = addRequestHandler;\r\n\t\thandlers[_ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_CHANGE] = changeRequestHandler;\r\n\r\n\t\tif ( requestState.requestType in handlers ) {\r\n\t\t\thandlers[requestState.requestType](requestState, subscribeToResult);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/messages.js?");

/***/ }),

/***/ "./_src/product-forms.js":
/*!*******************************!*\
  !*** ./_src/product-forms.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartProductFormsInit\": () => (/* binding */ cartProductFormsInit)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.js\");\n\r\n\r\n\r\nconst processesAmount = new WeakMap();\r\n\r\nconst cartProductFormsInit = () => {\r\n\tdocument.addEventListener('submit', e => {\r\n\r\n\t\tconst form = e.target;\r\n\t\tlet processesAmountBefore;\r\n\t\t// let errorMessage = '';\r\n\r\n\t\tconst formActionUrl = new URL(e.target.action);\r\n\t\tif (formActionUrl.pathname !== '/cart/add') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ('productFormsFilter' in _settings__WEBPACK_IMPORTED_MODULE_0__.settings && !_settings__WEBPACK_IMPORTED_MODULE_0__.settings.productFormsFilter(form) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\te.preventDefault();\r\n\r\n\t\tprocessesAmountBefore = processesAmount.get(form);\r\n\t\tif ( !(processesAmountBefore > 0) ) {\r\n\t\t\tprocessesAmountBefore = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// if the form has ana Ajax request in progress — ignore the submit\r\n\t\tif ( processesAmountBefore > 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst formData = new FormData(form);\r\n\t\t// const searchParams = new URLSearchParams(formData);\r\n\t\t// const productJson = {}\r\n\t\t// for ( let pair of formData ) {\r\n\t\t// \tconst key = pair[0];\r\n\t\t// \tconst value = pair[1]\r\n\t\t// \tif( ['quantity', 'id', 'selling_plan'].includes( key ) ) {\r\n\t\t// \t\tproductJson[key] = value;\r\n\t\t// \t}\r\n\t\t// \tif ( key.indexOf('properties[') === 0 && key.slice( -1 ) === ']' ) {\r\n\t\t// \t\tif ( !('properties' in productJson) ) {\r\n\t\t// \t\t\tproductJson.properties = {};\r\n\t\t// \t\t}\r\n\t\t// \t\tproductJson.properties[key.slice(11, -1)] = value;\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t// if ( !('id' in productJson) ) {\r\n\t\t// \t// todo : throw error if \"id\" is not set\r\n\t\t// \treturn;\r\n\t\t// }\r\n\t\t// if( !('quantity' in productJson) ) {\r\n\t\t// \tproductJson.quantity = 1;\r\n\t\t// }\r\n\r\n\t\tprocessesAmount.set( form, processesAmountBefore + 1 );\r\n\t\tupdateFormHTML( form );\r\n\r\n\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_1__.cartRequestAdd)( formData, {\r\n\t\t\t\"lastComplete\": requestState => {\r\n\t\t\t\t// if ( 'responseData' in requestState ) {\r\n\t\t\t\t// \tif ( !(requestState.responseData.ok) ) {\r\n\t\t\t\t// \t\tif ( 'description' in requestState.responseData.body ) {\r\n\t\t\t\t// \t\t\terrorMessage = requestState.responseData.body.description;\r\n\t\t\t\t// \t\t} else if ( 'message' in requestState.responseData.body ) {\r\n\t\t\t\t// \t\t\terrorMessage = requestState.responseData.body.message;\r\n\t\t\t\t// \t\t} else {\r\n\t\t\t\t// \t\t\terrorMessage = `Error ${ requestState.responseData.status }`;\r\n\t\t\t\t// \t\t}\r\n\t\t\t\t// \t}\r\n\t\t\t\t// } else {\r\n\t\t\t\t// \tif ('fetchError' in requestState) { \r\n\t\t\t\t// \t\terrorMessage = requestState.fetchError;\r\n\t\t\t\t// \t}\r\n\t\t\t\t// \t// todo: add default error message like \"Unknown Error\" that will show up if no condition is true\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tconst processesAmountAfter = processesAmount.get( form );\r\n\t\t\t\tif ( processesAmountAfter > 0 ) {\r\n\t\t\t\t\tprocessesAmount.set( form, processesAmountAfter - 1 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tupdateFormHTML( form );\r\n\t\t\t},\r\n\t\t\t\"info\": {\r\n\t\t\t\t\"initiator\": form\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\nfunction updateFormHTML ( form ) {\r\n\t// form.querySelectorAll(`[${ settings.computed.productFormsErrorsAttribute }]`).forEach( errorsContainer => {\r\n\t// \tif ( errorMessage ) {\r\n\t// \t\terrorsContainer.innerText = errorMessage;\r\n\t// \t} else {\r\n\t// \t\terrorsContainer.innerText = '';\r\n\t// \t}\r\n\t// });\r\n\t\r\n\r\n\t// const submitButtons = form.querySelectorAll('input[type=submit], button[type=submit]');\r\n\tconst formProcessesAmount = processesAmount.get( form );\r\n\r\n\tif ( _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass ) {\r\n\t\tif ( formProcessesAmount > 0 ) {\r\n\t\t\tform.classList.add( _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass );\r\n\t\t} else {\r\n\t\t\tform.classList.remove( _settings__WEBPACK_IMPORTED_MODULE_0__.settings.computed.productFormsProcessingClass );\r\n\t\t}\r\n\t}\r\n\r\n\t// if ( settings.productFormsButtonProcessingClass || settings.productFormsButtonProcessingDisabledAttribute ) {\r\n\t// \tform.querySelectorAll('input[type=submit], button[type=submit]').forEach( button => {\r\n\t// \t\tif ( formProcessesAmount > 0 ) {\r\n\t// \t\t\tif ( settings.productFormsButtonProcessingClass ) {\r\n\t// \t\t\t\tbutton.classList.add( settings.productFormsButtonProcessingClass );\r\n\t// \t\t\t}\r\n\t// \t\t\tif ( settings.productFormsButtonProcessingDisabledAttribute ) {\r\n\t// \t\t\t\tbutton.disabled = true;\r\n\t// \t\t\t}\r\n\t// \t\t} else {\r\n\t// \t\t\tif ( settings.productFormsButtonProcessingClass ) {\r\n\t// \t\t\t\tbutton.classList.remove( settings.productFormsButtonProcessingClass );\r\n\t// \t\t\t}\r\n\t// \t\t\tif ( settings.productFormsButtonProcessingDisabledAttribute ) {\r\n\t// \t\t\t\tbutton.disabled = false;\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/product-forms.js?");

/***/ }),

/***/ "./_src/sections.js":
/*!**************************!*\
  !*** ./_src/sections.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartSectionsInit\": () => (/* binding */ cartSectionsInit)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n\r\n\r\n\r\nconst shopifySectionPrefix = 'shopify-section-';\r\n\r\nconst cartSectionsInit = () => {\r\n\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests) (( requestState, subscribeToResult ) => {\r\n\t\tconst { sectionsAttribute, sectionScrollAreaAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n\r\n\t\tif ( requestState.requestBody !== undefined ) {\r\n\t\t\tconst sectionNames = [];\r\n\t\t\t// todo: test with dynamic sections\r\n\t\t\tdocument.querySelectorAll( `[${ sectionsAttribute }]` ).forEach( sectionNodeChild => {\r\n\t\t\t\t// todo: test if the attribute not within a section\r\n\t\t\t\tconst sectionNode = sectionNodeChild.closest(`[id^=\"${ shopifySectionPrefix }\"]`);\r\n\t\t\t\tif ( sectionNode ) {\r\n\t\t\t\t\tconst sectionId = sectionNode.id.replace( shopifySectionPrefix, '' );\r\n\t\t\t\t\tif ( sectionNames.indexOf( sectionId ) === -1 ) {\r\n\t\t\t\t\t\tsectionNames.push( sectionId );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif ( sectionNames.length ) {\r\n\t\t\t\tif ( requestState.requestBody instanceof FormData || requestState.requestBody instanceof URLSearchParams ) {\r\n\t\t\t\t\trequestState.requestBody.append('sections', sectionNames.join( ',' ));\r\n\t\t\t\t} else {\r\n\t\t\t\t\trequestState.requestBody.sections = sectionNames.join( ',' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsubscribeToResult( requestState => {\r\n\t\t\tconst { sectionsAttribute, sectionScrollAreaAttribute } = _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed;\r\n\t\t\tconst parser = new DOMParser();\r\n\r\n\t\t\tif ( requestState.responseData?.ok && 'sections' in requestState.responseData.body ) {\r\n\t\t\t\tconst sections = requestState.responseData.body.sections;\r\n\t\t\t\tfor ( let sectionId in sections ) {\r\n\t\t\t\t\tif ( !sections[ sectionId ] ) {\r\n\t\t\t\t\t\tconsole.error(`Liquid Ajax Cart: the HTML for the \"${ sectionId }\" section was requested but the response is ${ sections[ sectionId ] }`)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdocument.querySelectorAll( `#shopify-section-${ sectionId }` ).forEach( sectionNode => {\r\n\r\n\t\t\t\t\t\t// let newSectionNode = sectionNode;\r\n\r\n\t\t\t\t\t\t// Memorize scroll positions\r\n\t\t\t\t\t\tconst noId = \"__noId__\";\r\n\t\t\t\t\t\tconst scrollAreasList = {};\r\n\t\t\t\t\t\tsectionNode.querySelectorAll(` [${ sectionScrollAreaAttribute }] `).forEach( scrollAreaNode => {\r\n\t\t\t\t\t\t\tlet scrollId = scrollAreaNode.getAttribute( sectionScrollAreaAttribute ).toString().trim();\r\n\t\t\t\t\t\t\tif ( scrollId === '' ) {\r\n\t\t\t\t\t\t\t\tscrollId = noId;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ( !(scrollId in scrollAreasList) ) {\r\n\t\t\t\t\t\t\t\tscrollAreasList[scrollId] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tscrollAreasList[scrollId].push(scrollAreaNode.scrollTop);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Replace HTML\r\n\t\t\t\t\t\tconst sectionParts = sectionNode.querySelectorAll( `[${ sectionsAttribute }]` );\r\n\t\t\t\t\t\tif ( sectionParts ) {\r\n      \t\t\t\t\t\tconst receivedDOM = parser.parseFromString(sections[ sectionId ], \"text/html\");\r\n      \t\t\t\t\t\tconst receivedParts = receivedDOM.querySelectorAll( `[${ sectionsAttribute }]` );\r\n      \t\t\t\t\t\tif ( sectionParts.length !== receivedParts.length ) {\r\n      \t\t\t\t\t\t\tconsole.error(`Liquid Ajax Cart: the received HTML for the \"${ sectionId }\" section has a different quantity of the \"${ sectionsAttribute }\" containers. The section will be updated completely.`);\r\n      \t\t\t\t\t\t\tconst receivedSection = receivedDOM.querySelector(`#${ shopifySectionPrefix }${ sectionId }`);\r\n\t\t\t\t\t\t\t\tif ( receivedSection ) {\r\n\t\t\t\t\t\t\t\t\tsectionNode.innerHTML = receivedSection.innerHTML;\r\n\t\t\t\t\t\t\t\t}\r\n      \t\t\t\t\t\t} else {\r\n      \t\t\t\t\t\t\tsectionParts.forEach(( sectionPartsItem, sectionPartsItemIndex ) => {\r\n      \t\t\t\t\t\t\t\tsectionPartsItem.before( receivedParts[sectionPartsItemIndex] );\r\n\t\t\t\t\t\t\t\t\tsectionPartsItem.parentElement.removeChild(sectionPartsItem);\r\n      \t\t\t\t\t\t\t});\r\n      \t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Restore scroll positions\r\n\t\t\t\t\t\tfor ( let scrollId in scrollAreasList ) {\r\n\t\t\t\t\t\t\tsectionNode.querySelectorAll(` [${ sectionScrollAreaAttribute }=\"${ scrollId.replace( noId, '' ) }\"] `).forEach(( scrollAreaNode, scrollAreaIndex ) => {\r\n\t\t\t\t\t\t\t\tif ( scrollAreaIndex + 1 <= scrollAreasList[ scrollId ].length ) {\r\n\t\t\t\t\t\t\t\t\tscrollAreaNode.scrollTop = scrollAreasList[ scrollId ][ scrollAreaIndex ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/sections.js?");

/***/ }),

/***/ "./_src/settings.js":
/*!**************************!*\
  !*** ./_src/settings.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartSettingsInit\": () => (/* binding */ cartSettingsInit),\n/* harmony export */   \"settings\": () => (/* binding */ settings),\n/* harmony export */   \"configureCart\": () => (/* binding */ configureCart)\n/* harmony export */ });\nconst cssClassesPrefix = 'js-ajax-cart';\r\nconst dataAttributePrefix = 'data-ajax-cart';\r\n\r\nconst settings = {\r\n\tproductFormsFilter: formNode => true,\r\n\tmessageBuilder: messages => {\r\n\t\tlet result = '';\r\n\t\tmessages.forEach( element => {\r\n\t\t\tresult += `<div class=\"${ cssClassesPrefix }-message ${ cssClassesPrefix }-message--${ element.type }\">${ element.text }</div>`;\r\n\t\t})\r\n\t\treturn result;\r\n\t},\r\n\r\n\tlineItemQuantityErrorText: 'You can\\'t add more of this item to your cart',\r\n\trequestErrorText: 'There was an error while updating your cart. Please try again.',\r\n\r\n\tupdateOnWindowFocus: true,\r\n\r\n\tcomputed: {\r\n\t\tproductFormsErrorsAttribute: `${ dataAttributePrefix }-form-error`,\r\n\t\tsectionsAttribute: `${ dataAttributePrefix }-section`,\r\n\t\tbinderAttribute: `${ dataAttributePrefix }-bind-state`,\r\n\t\trequestButtonAttribute: `${ dataAttributePrefix }-request-button`,\r\n\t\ttoggleClassButtonAttribute: `${ dataAttributePrefix }-toggle-class-button`,\r\n\t\tinitialStateAttribute: `${ dataAttributePrefix }-initial-state`,\r\n\t\tsectionScrollAreaAttribute: `${ dataAttributePrefix }-section-scroll`,\r\n\t\tquantityInputAttribute: `${ dataAttributePrefix }-quantity-input`,\r\n\t\tpropertyInputAttribute: `${ dataAttributePrefix }-property-input`,\r\n\t\tmessagesAttribute: `${ dataAttributePrefix }-messages`,\r\n\t\tconfigurationAttribute: `${ dataAttributePrefix }-configuration`,\r\n\r\n\t\tcartStateSetBodyClass: `${ cssClassesPrefix }-set`,\r\n\t\trequestInProgressBodyClass: `${ cssClassesPrefix }-request-in-progress`,\r\n\t\temptyCartBodyClass: `${ cssClassesPrefix }-empty`,\r\n\t\tnotEmptyCartBodyClass: `${ cssClassesPrefix }-not-empty`,\r\n\t\tproductFormsProcessingClass: `${ cssClassesPrefix }-form-in-progress`\r\n\t}\r\n}\r\n\r\nconst configureCart = ( property, value ) => {\r\n\tif ( property in settings && property !== 'computed' ) {\r\n\t\tsettings[property] = value;\r\n\t} else {\r\n\t\tconsole.error(`Liquid Ajax Cart: unknown configuration parameter \"${ property }\"`);\r\n\t}\r\n}\r\n\r\nconst cartSettingsInit = () => {\r\n\tconst configurationContainer = document.querySelector(`[${ settings.computed.configurationAttribute }]`);\r\n\tif ( configurationContainer ) {\r\n\t\ttry {\r\n\t\t\tconst configuration = JSON.parse(configurationContainer.textContent);\r\n\t\t\tconst notSupportedProperties = [ 'productFormsFilter', 'messageBuilder' ];\r\n\t\t\tfor ( let property in configuration ) {\r\n\t\t\t\tif ( notSupportedProperties.includes( property ) ) {\r\n\t\t\t\t\tconsole.error(`Liquid Ajax Cart: the \"${ property }\" parameter is not supported inside the \"${ settings.computed.configurationAttribute }\" script — use the \"configureCart\" function for it`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconfigureCart( property, configuration[property] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Liquid Ajax Cart: can't parse configuration JSON from the \"${ settings.computed.configurationAttribute }\" script`);\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/settings.js?");

/***/ }),

/***/ "./_src/state.js":
/*!***********************!*\
  !*** ./_src/state.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cartStateInit\": () => (/* binding */ cartStateInit),\n/* harmony export */   \"subscribeToCartStateUpdate\": () => (/* binding */ subscribeToCartStateUpdate),\n/* harmony export */   \"getCartState\": () => (/* binding */ getCartState)\n/* harmony export */ });\n/* harmony import */ var _ajax_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ajax-api */ \"./_src/ajax-api.js\");\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./_src/settings.js\");\n\r\n\r\n\r\nconst queryCounter = {\r\n\tall: 0\r\n\t/**\r\n\t * for the future\r\n\t * \r\n\t * 'item_key': {\r\n\t * \t\tquantity: 0,\r\n\t * \t\tproperties: 0,\r\n\t * }\r\n\t */ \r\n};\r\n\r\nconst subscribers = [];\r\nlet cart = {};\r\nlet status = {\r\n\trequestInProgress: false,\r\n\tcartStateSet: false,\r\n};\r\n\r\nconst cartStateInit = () => {\r\n\r\n\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.subscribeToCartAjaxRequests)(( data, subscribeToResult ) => {\t\t\r\n\t\tbeforeRequestHandler( data )\r\n\t\tstatusUpdate();\r\n\r\n\t\tsubscribeToResult( data => {\r\n\t\t\tafterRequestHandler( data );\r\n\t\t\tstatusUpdate();\r\n\t\t})\r\n\t});\r\n\r\n\tconst initialStateContainer = document.querySelector(`[${ _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute }]`);\r\n\tif ( initialStateContainer ) {\r\n\t\ttry {\r\n\t\t\tconst initialState = JSON.parse(initialStateContainer.textContent);\r\n\t\t\t// todo: create a function for checking cart object\r\n\t\t\tif ( 'item_count' in initialState ) {\r\n\t\t\t\tcart = initialState;\r\n\t\t\t\tstatusUpdate();\r\n\t\t\t} else {\r\n\t\t\t\tthrow `JSON from ${ _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute } script is not correct cart object`;\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Liquid Ajax Cart: can't parse cart JSON from the \"${ _settings__WEBPACK_IMPORTED_MODULE_1__.settings.computed.initialStateAttribute }\" script. A /cart.js request will be performed to receive the cart state`);\r\n\t\t\tconsole.error(e);\r\n\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestGet)();\r\n\t\t}\r\n\t} else {\r\n\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestGet)();\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst beforeRequestHandler = ( data ) => {\r\n\tqueryCounter.all++;\r\n}\r\n\r\nconst afterRequestHandler = ( data ) => {\r\n\tqueryCounter.all--;\r\n\tif ( 'responseData' in data && data.responseData.ok ) {\r\n\t\tif ( data.requestType === _ajax_api__WEBPACK_IMPORTED_MODULE_0__.REQUEST_ADD ) {\r\n\t\t\tif ( 'extraResponseData' in data && data.extraResponseData.ok ) {\r\n\t\t\t\tcart = data.extraResponseData.body;\r\n\t\t\t} else {\r\n\t\t\t\t(0,_ajax_api__WEBPACK_IMPORTED_MODULE_0__.cartRequestGet)();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tcart = data.responseData.body;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst statusUpdate = () => {\r\n\tstatus.requestInProgress = queryCounter.all > 0;\r\n\tstatus.cartStateSet = 'item_count' in cart; // todo: create a function for checking cart object\r\n\tnotify();\r\n}\r\n\r\nconst subscribeToCartStateUpdate = ( callback ) => {\r\n\ttry {\r\n\t\tcallback({\r\n\t\t\tcart,\r\n\t\t\tstatus\r\n\t\t});\r\n\t\tsubscribers.push( callback );\r\n\t} catch (e) {\r\n\t\tconsole.log('Liquid Ajax Cart: Error during subscribing to the state');\r\n\t\tconsole.error(e);\r\n\t}\r\n}\r\n\r\nconst getCartState = () => {\r\n\treturn {\r\n\t\tcart,\r\n\t\tstatus\r\n\t}\r\n}\r\n\r\nconst notify = () => {\r\n\tsubscribers.forEach( callback => {\r\n\t\ttry {\r\n\t\t\tcallback({\r\n\t\t\t\tcart,\r\n\t\t\t\tstatus,\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(e);\r\n\t\t\t// todo: add error handler like in subscribeToCartStateUpdate\r\n\t\t}\r\n\t})\r\n}\r\n\r\n\n\n//# sourceURL=webpack://liquid-ajax-cart/./_src/state.js?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./_src/index.js");
/******/ var __webpack_exports__cartRequestAdd = __webpack_exports__.cartRequestAdd;
/******/ var __webpack_exports__cartRequestChange = __webpack_exports__.cartRequestChange;
/******/ var __webpack_exports__cartRequestClear = __webpack_exports__.cartRequestClear;
/******/ var __webpack_exports__cartRequestGet = __webpack_exports__.cartRequestGet;
/******/ var __webpack_exports__cartRequestUpdate = __webpack_exports__.cartRequestUpdate;
/******/ var __webpack_exports__configureCart = __webpack_exports__.configureCart;
/******/ var __webpack_exports__getCartState = __webpack_exports__.getCartState;
/******/ var __webpack_exports__subscribeToCartAjaxRequests = __webpack_exports__.subscribeToCartAjaxRequests;
/******/ var __webpack_exports__subscribeToCartStateUpdate = __webpack_exports__.subscribeToCartStateUpdate;
/******/ export { __webpack_exports__cartRequestAdd as cartRequestAdd, __webpack_exports__cartRequestChange as cartRequestChange, __webpack_exports__cartRequestClear as cartRequestClear, __webpack_exports__cartRequestGet as cartRequestGet, __webpack_exports__cartRequestUpdate as cartRequestUpdate, __webpack_exports__configureCart as configureCart, __webpack_exports__getCartState as getCartState, __webpack_exports__subscribeToCartAjaxRequests as subscribeToCartAjaxRequests, __webpack_exports__subscribeToCartStateUpdate as subscribeToCartStateUpdate };
/******/ 
