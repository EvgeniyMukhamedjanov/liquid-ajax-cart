var t={d:(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{j:()=>c});const o=[],r=(t,e)=>{const r=(t=>{switch(t){case"add":return"/cart/add.js";case"change":return"/cart/change.js";case"get":return"/cart.js";default:return}})(t),s="get"===t?void 0:{...e},n="get"===t?"GET":"POST";o.forEach((e=>{try{e({requestType:t,endpoint:r,requestBody:s})}catch(t){console.error("Liquid Ajax Cart: Error during callback in Ajax Api"),console.error(t)}}));const i={method:n,headers:{"Content-Type":"application/json"}};return"get"!==t&&(i.body=JSON.stringify(s)),fetch(r,i).then((t=>t.json().then((e=>({ok:t.ok,status:t.status,body:e}))))).then((e=>(o.forEach((o=>{try{o({requestType:t,endpoint:r,requestBody:s,responseData:e})}catch(t){console.error("Liquid Ajax Cart: Error during callback"),console.error(t)}})),e))).catch((t=>{console.log(t)}))},s=()=>r("get"),n=t=>{o.push(t)},i={dataAttributePrefix:"data-ajax-cart",cssClassesPrefix:"js-ajax-cart",productFormsFilter:t=>!0,requestInProgressBodyClass:"js-ajax-cart-request-in-progress",cartStateSetBodyClass:"js-ajax-cart-set",emptyCartBodyClass:"js-ajax-cart-empty",productFormsIgnoreSubmitOnProcessing:!0,productFormsProcessingClass:"js-ajax-cart-form-in-progress",productFormsButtonProcessingClass:"js-ajax-cart-button-in-progress",productFormsButtonProcessingDisabledAttribute:!1};let a={};const c=(t={})=>{a={...i,...t},a.computed={productFormsErrorsAttribute:`${a.dataAttributePrefix}-form-error`,sectionsAttribute:`${a.dataAttributePrefix}-section`,binderAttribute:`${a.dataAttributePrefix}-bind-state`,quantityButtonAttribute:`${a.dataAttributePrefix}-quantity-button`,toggleClassButtonAttribute:`${a.dataAttributePrefix}-toggle-class-button`,toggleClassPrefix:`${a.cssClassesPrefix}-toggle-`,initialStateAttribute:`${a.dataAttributePrefix}-initial-state`,sectionScrollAreaAttribute:`${a.dataAttributePrefix}-section-scroll`}};c();const u={all:0},l=[];let d={},p={requestInProgress:!1,cartStateSet:!1};const m=()=>{p.requestInProgress=u.all>0,p.cartStateSet="item_count"in d},f=t=>{try{t({cart:d,status:p}),l.push(t)}catch(t){console.log("Liquid Ajax Cart: Error during subscribing to the state"),console.error(t)}},y=()=>({cart:d,status:p}),g=()=>{l.forEach((t=>{try{t({cart:d,status:p})}catch(t){console.error(t)}}))};(()=>{n((t=>{"responseData"in t?(t=>{u.all--,t.responseData.ok&&("add"!==t.requestType?d=t.responseData.body:s())})(t):u.all++,m(),g()}));const t=document.querySelector(`[${a.computed.initialStateAttribute}]`);if(t)try{const e=JSON.parse(t.textContent);if(!("item_count"in e))throw`JSON from ${a.computed.initialStateAttribute} script is not correct cart object`;d=e,m(),g()}catch(t){console.error(`Can't parse cart JSON from ${a.computed.initialStateAttribute} script`),console.error(t),s()}else s()})();const b=a.computed.binderAttribute,h=t=>{const[e,...o]=t.split("|");let r=S(e);return o.forEach((t=>{const e=t.trim();""!==e&&e in A&&(r=A[e](r))})),r};function S(t,e=y()){y();const o=t.split("."),r=o.shift().trim();return r in e&&o.length>0?S(o.join("."),e[r]):e[r]}const A={amount:t=>{if("Shopify"in window&&"formatMoney"in Shopify)return Shopify.formatMoney(t,"{{ amount }}")},amount_no_decimals:t=>{if("Shopify"in window&&"formatMoney"in Shopify)return Shopify.formatMoney(t,"{{ amount_no_decimals }}")},amount_with_comma_separator:t=>{if("Shopify"in window&&"formatMoney"in Shopify)return Shopify.formatMoney(t,"{{ amount_with_comma_separator }}")},amount_no_decimals_with_comma_separator:t=>{if("Shopify"in window&&"formatMoney"in Shopify)return Shopify.formatMoney(t,"{{ amount_no_decimals_with_comma_separator }}")},amount_with_apostrophe_separator:t=>{if("Shopify"in window&&"formatMoney"in Shopify)return Shopify.formatMoney(t,"{{ amount_with_apostrophe_separator }}")}};function q(t){t.preventDefault();const{quantityButtonAttribute:e}=a.computed;if(!y().status.requestInProgress){const[t,s]=this.getAttribute(e).split("|");o={id:t.trim(),quantity:parseInt(s.trim())},r("change",o)}var o}function P(t){t.preventDefault();const{toggleClassButtonAttribute:e}=a.computed,o=this.getAttribute(e).split("|");if(!o)return void console.error("Liquid Ajax Cart: Error while toggling body class");const r=o[0].trim();let s=o[1]?o[1].trim():"toggle";if("add"!==s&&"remove"!==s&&(s="toggle"),r)try{"add"===s?document.body.classList.add(r):"remove"===s?document.body.classList.remove(r):document.body.classList.toggle(r)}catch(t){console.error("Liquid Ajax Cart: Error while toggling body class:",r),console.error(t)}}f((t=>{t.status.cartStateSet&&document.querySelectorAll(`[${b}]`).forEach((t=>{const e=t.getAttribute(b),o=h(e);void 0!==o&&(t.innerText=o)}))})),n((t=>{const{sectionsAttribute:e,sectionScrollAreaAttribute:o}=a.computed;if("responseData"in t){if(t.responseData.ok&&"sections"in t.responseData.body){const r=t.responseData.body.sections;for(let t in r)document.querySelectorAll(`#shopify-section-${t} > [${e}]`).forEach((e=>{const s="__noId__",n={},i=e.parentNode;e.parentNode.querySelectorAll(` [${o}] `).forEach((t=>{let e=t.getAttribute(o).toString().trim();""===e&&(e=s),e in n||(n[e]=[]),console.log(e),n[e].push(t.scrollTop)})),i.insertAdjacentHTML("beforeBegin",r[t]);const a=i.previousSibling;i.parentElement.removeChild(i);for(let t in n)a.querySelectorAll(` [${o}="${t.replace(s,"")}"] `).forEach(((e,o)=>{o+1<=n[t].length&&(e.scrollTop=n[t][o])}))}))}}else if(void 0!==t.requestBody){const o=[];document.querySelectorAll(`[${e}]`).forEach((t=>{let e=t.parentElement.id;if(0===e.indexOf("shopify-section-")){const t=e.replace("shopify-section-","");-1===o.indexOf(t)&&o.push(t)}})),o.length&&(t.requestBody.sections=o.join(","))}})),document.addEventListener("click",(function(t){const{quantityButtonAttribute:e,toggleClassButtonAttribute:o}=a.computed;for(var r=t.target;r&&r!=this;r=r.parentNode){if(r.matches(`[${e}]`)){q.call(r,t);break}if(r.matches(`[${o}]`)){P.call(r,t);break}}}),!1);const _=new WeakMap;function C(t,e=""){t.querySelectorAll(`[${a.computed.productFormsErrorsAttribute}]`).forEach((t=>{t.innerText=e||""})),t.querySelectorAll("input[type=submit], button[type=submit]");const o=_.get(t);a.productFormsProcessingClass&&(o>0?t.classList.add(a.productFormsProcessingClass):t.classList.remove(a.productFormsProcessingClass)),(a.productFormsButtonProcessingClass||a.productFormsButtonProcessingDisabledAttribute)&&t.querySelectorAll("input[type=submit], button[type=submit]").forEach((t=>{o>0?(a.productFormsButtonProcessingClass&&t.classList.add(a.productFormsButtonProcessingClass),a.productFormsButtonProcessingDisabledAttribute&&(t.disabled=!0)):(a.productFormsButtonProcessingClass&&t.classList.remove(a.productFormsButtonProcessingClass),a.productFormsButtonProcessingDisabledAttribute&&(t.disabled=!1))}))}document.addEventListener("submit",(t=>{const e=t.target;let o,s="";if("/cart/add"!==new URL(t.target.action).pathname)return;if("productFormsFilter"in a&&!a.productFormsFilter(e))return;if(t.preventDefault(),o=_.get(e),o>0||(o=0),a.productFormsIgnoreSubmitOnProcessing&&o>0)return;const n=new FormData(e),i={};for(let t of n){const e=t[0],o=t[1];["quantity","id","selling_plan"].includes(e)&&(i[e]=o),0===e.indexOf("properties[")&&"]"===e.slice(-1)&&("properties"in i||(i.properties={}),i.properties[e.slice(11,-1)]=o)}var c;"id"in i&&("quantity"in i||(i.quantity=1),_.set(e,o+1),C(e),(c={items:[i]},r("add",c)).then((t=>{t.ok||(s="description"in t.body?t.body.description:"message"in t.body?t.body.message:`Error ${t.status}`)})).finally((()=>{const t=_.get(e);t>0&&_.set(e,t-1),C(e,s)})))})),f((t=>{const{cartStateSetBodyClass:e,requestInProgressBodyClass:o,emptyCartBodyClass:r}=a;e&&(t.status.cartStateSet?document.body.classList.add(e):document.body.classList.remove(e)),o&&(t.status.requestInProgress?document.body.classList.add(o):document.body.classList.remove(o)),r&&(t.status.cartStateSet&&0===t.cart.item_count?document.body.classList.add(r):document.body.classList.remove(r))}));var j=e.j;export{j as configure};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,