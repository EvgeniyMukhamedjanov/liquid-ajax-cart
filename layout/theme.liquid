<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
<head>

  <!-- Basic page needs ================================================== -->
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  {% if settings.favicon %}
    <link rel="shortcut icon" href="{{ settings.favicon | img_url: '32x32' }}" type="image/png"/>
  {% endif %}

  <!-- Title and description ================================================== -->
  <title>
    {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% if page_description %}
    <meta name="description" content="{{ page_description | escape }}">
  {% endif %}

  <!-- Social meta ================================================== -->
  {% include 'social-meta-tags' %}

  <!-- Helpers ================================================== -->
  <link rel="canonical" href="{{ canonical_url }}">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <meta name="theme-color" content="{{ settings.color_primary }}">

  <!-- CSS ================================================== -->
  {{ 'timber.scss.css' | asset_url | stylesheet_tag }}
  {{ 'theme.scss.css' | asset_url | stylesheet_tag }}
  {% render 'css-variables' %}

  <script>
    window.theme = window.theme || {};

    var theme = {
      strings: {
        addToCart: {{ 'products.product.add_to_cart' | t | json }},
        soldOut: {{ 'products.product.sold_out' | t | json }},
        unavailable: {{ 'products.product.unavailable' | t | json }},
        zoomClose: {{ "products.zoom.close" | t | json }},
        zoomPrev: {{ "products.zoom.prev" | t | json }},
        zoomNext: {{ "products.zoom.next" | t | json }},
        addressError: {{ 'map.errors.address_error' | t | json }},
        addressNoResults: {{ 'map.errors.address_no_results' | t | json }},
        addressQueryLimit: {{ 'map.errors.address_query_limit_html' | t | json }},
        authError: {{ 'map.errors.auth_error_html' | t | json }}
      },
      settings: {
        // Adding some settings to allow the editor to update correctly when they are changed
        enableWideLayout: {{ settings.enable_wide_layout }},
        typeAccentTransform: {{ settings.type_accent_transform }},
        typeAccentSpacing: {{ settings.type_accent_spacing }},
        baseFontSize: '{{ settings.type_base_size }}',
        headerBaseFontSize: '{{ settings.type_header_size }}',
        accentFontSize: '{{ settings.type_accent_size }}'
      },
      variables: {
        mediaQueryMedium: 'screen and (max-width: 768px)',
        bpSmall: false
      },
      moneyFormat: {{ shop.money_format | json }}
    };

    {%- if template == 'collection' -%}
    {%- if current_tags -%}
    {%- capture tag_handles -%}
    {%- for tag in current_tags -%}
    {{- tag | handle | append: '|' -}}
    {%- endfor -%}
    {%- endcapture -%}
    {%- endif -%}

    theme.breadcrumbs = {
      collection: {
        title: {{ collection.title | json }},
        link: "{{ shop.url }}{{ collection.url }}{%- if current_tags -%}/{{- tag_handles | split: '|' | join: '+' -}}{%- endif -%}"
      }
    };
    sessionStorage.setItem("breadcrumb", JSON.stringify(theme.breadcrumbs.collection));

    {%- elsif template != 'product' -%}
    if (sessionStorage.getItem("breadcrumb")) {
      sessionStorage.removeItem("breadcrumb")
    }
    {%- endif -%}

    document.documentElement.className = document.documentElement.className.replace('no-js', 'supports-js');
  </script>

  <!-- Header hook for plugins ================================================== -->
  {{ content_for_header }}

  {{ 'jquery-2.2.3.min.js' | asset_url | script_tag }}

  <script src="{{ 'lazysizes.min.js' | asset_url }}" async="async"></script>

  {% comment %}
    If you store has customer accounts disabled, you can remove the following JS file
  {% endcomment %}
  {% if request.page_type contains 'customers/' %}
    {{ 'shopify_common.js' | shopify_asset_url | script_tag }}
  {% endif %}

</head>

<body id="{{ page_title | handle }}"
      class="{% if customer %}customer-logged-in {% endif %}template-{{ request.page_type | handle }}">

{% section 'header' %}

<main class="wrapper main-content" role="main">
  <div class="grid">
    <div class="grid__item">
      {{ content_for_layout }}
    </div>
  </div>
</main>

{% section 'footer' %}

{%- if request.page_type == 'index' -%}
  <p id="slideshow-info" class="visually-hidden" aria-hidden="true">
    {{- 'home_page.slideshow.navigation_instructions' | t -}}
  </p>
{%- endif -%}

{% if request.page_type == 'product' or request.page_type == 'index' %}
  {{ 'option_selection.js' | shopify_asset_url | script_tag }}
{% endif %}

<ul hidden>
  <li id="a11y-refresh-page-message">{{ 'general.accessibility.refresh_page' | t }}</li>
  <li id="a11y-external-message">{{ 'general.accessibility.new_window' | t }}</li>
  <li id="a11y-new-window-external-message">{{ 'general.accessibility.new_window_and_external' | t }}</li>
</ul>

{{ 'theme.js' | asset_url | script_tag }}

{% section 'my-cart' %}
{{ 'liquid-ajax-cart.css' | asset_url | stylesheet_tag }}

<script type="application/json" data-ajax-cart-initial-state>
  {{ cart | json }}
</script>


<script type="module">
  import '{{ 'liquid-ajax-cart.js' | asset_url }}';

  console.log("Is Liquid Ajax Cart initialized: ",  window.liquidAjaxCart.init);
  window.liquidAjaxCart.conf('updateOnWindowFocus', false);

  function liquidAjaxCartInit() {
    // console.log(123);
  }

  document.addEventListener('liquid-ajax-cart:init', liquidAjaxCartInit);

  setTimeout(() => {
    // console.log(window.liquidAjaxCart.init);
  }, 0)
  // console.log(liquidAjaxCart.init);

  liquidAjaxCart.conf('binderFormatters', {
    'my_money_with_currency': value => {
      // Don't change anything if the value is not a number
      if (typeof value !== 'number' && !(value instanceof Number)) {
        return value;
      }

      // Apply formatMoney function if it exists
      if (window.Shopify?.formatMoney) {
        return Shopify.formatMoney(value);
      }

      // Fallback to the "100 USD" format if there is no Shopify.formatMoney
      return `${value.toFixed(2)} ${window.liquidAjaxCart.cart.currency}`;
    }
  });

  // Open cart on "add to cart"
  document.addEventListener('liquid-ajax-cart:request-end', event => {
    const {requestState} = event.detail;
    console.log("request-end");
    if (requestState.requestType === 'add' && requestState.responseData?.ok) {
      document.querySelector('html').classList.add('js-ajax-cart-open');
    }
  });

  // document.addEventListener('liquid-ajax-cart:request-start', event => {
  //   liquidAjaxCart.update({});
  //   liquidAjaxCart.get({important: true});
  //   liquidAjaxCart.get({important: true});
  // });

  document.addEventListener('liquid-ajax-cart:request-start', event => {
    console.log("request-start");
    // event.detail.requestState.info.cancel = true;
    // console.log(event.detail);
  });

  // subscribeToCartAjaxRequests(( requestState, subscribeToResult ) => {
  document.addEventListener('liquid-ajax-cart:request-end', event => {
    const {requestState, cart, previousCart} = event.detail;
    console.log(cart, previousCart);

    if (requestState.requestType === 'add') {
      const checkbox = document.getElementById('addToCartPopupCheckbox');
      if (checkbox && checkbox.checked) {
        if (requestState.responseData?.ok) {
          let productName = requestState.responseData.body.title;
          if (requestState.responseData.body.items?.length === 1) {
            productName = requestState.responseData.body.items[0].title;
          }
          alert(`${productName ? '«' + productName + '» is' : 'Products are'} successfully added`);
        }
      }
    }
  });

  // subscribeToCartStateUpdate( state => {
  document.addEventListener('liquid-ajax-cart:queue-end', event => {
    const cart = liquidAjaxCart.cart;
    const promoVariant = 40934235668668;
    const promoSubtotal = 10000;

    if (!(liquidAjaxCart.processing)) {

      let currentSubtotal = cart.items_subtotal_price;

      const autoAddedLineItem = cart.items.findIndex(lineItem => {
        return lineItem.properties?._autoadded === 'Yes';
      });
      if (autoAddedLineItem > -1) {
        currentSubtotal -= cart.items[autoAddedLineItem].final_line_price;
      }

      if (currentSubtotal >= promoSubtotal) {
        const promoVariantLineItem = cart.items.findIndex(lineItem => {
          return lineItem.variant_id === promoVariant && lineItem.discounts.length > 0;
        });
        if (promoVariantLineItem === -1) {
          liquidAjaxCart.add({
            items: [{
              id: promoVariant,
              quantity: 1,
              properties: {"_autoadded": "Yes"}
            }]
          });
        }
      } else {
        if (autoAddedLineItem > -1) {
          liquidAjaxCart.change({
            "line": autoAddedLineItem + 1,
            "quantity": 0
          }, {
            firstCallback: () => {console.log("first complete")},
            lastCallback: () => {console.log("last complete")}
          });
        }
      }
    }
  });

</script>

</body>
</html>
